[
  {
    "objectID": "docs/setting-up/setup_2_github.html",
    "href": "docs/setting-up/setup_2_github.html",
    "title": "Hello, GitHub! (Need)",
    "section": "",
    "text": "GitHub is an online service to help develop and maintain code. It is called GitHub because it is based on a version control tool called Git. A key feature of Git and GitHub is how it helps keep track of the changes to code. You can think of GitHub as a sophisticated version of Google Drive or Dropbox. The know-how to use Git and GitHub is a plus for tech employees.\n73 will use the educational branch of GitHub called GitHub Classroom. We will only use the simplest features of GitHub Classroom that allow you to share your code and solicit instructor feedback. In this chapter, I will take you through the setup process for GitHub Classroom. If you are already familiar with GitHub, feel free to jump ahead."
  },
  {
    "objectID": "docs/setting-up/setup_2_github.html#footnotes",
    "href": "docs/setting-up/setup_2_github.html#footnotes",
    "title": "Hello, GitHub! (Need)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nor the End of the Universe↩︎"
  },
  {
    "objectID": "docs/setting-up/setup_0_main.html",
    "href": "docs/setting-up/setup_0_main.html",
    "title": "Tools of the Trade",
    "section": "",
    "text": "Overview\nIt is not surprising that 73 will have to use technology. Some of the key requirements of technology in this module are:\n\nEasy access to Python,\nEase of incorporating a scientific discussion with the Python code,\nEase of sharing Python code for feedback and collaborative work.\nEase of starting a discussion about the content.\n\nNo single platform can fulfill all these requirements, so we must use several different tools. However, I have organised the course to have an easy workflow for you to learn by doing and getting feedback. So here are the platforms we will use.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlatform\nHow it will help us\n\n\n\n\n\nJupyter Notebooks\nEasy access to Python with ample features for scientific discussions.\n\n\n\nGitHub Classroom\nSharing the Jupyter Notebooks\n\n\n\nHypothesis\nAnnotate, discuss centred on course notes.\n\n\n\nCanvas\nOfficial Learning Management System (LMS) of NUS\n\n\n\nGoogle Docs\nScheduling and grading.\n\n\n\nTEAMMATES\nFor within group feedback\n\n\n\n\nIn this section, I will show you how to set up three essential tools, namely:\n\nHypothesis,\nGitHub classrooms and\nJupyter Notebooks.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "docs/about/instructions.html",
    "href": "docs/about/instructions.html",
    "title": "Instructions",
    "section": "",
    "text": "Need, Good and Nice:When possible, I have categorized the content as Need to Know, Good to Know and Nice to Know. You should typically know everything that is Need to Know and Good to Know. You should look at the Nice to Know portions once you are more comfortable with Python.\nExercises & Problems:\n\nExercises(Simple): These will only reinforce Python syntax and best suit those who are new to Python.\nExercises: These general tasks will help you practice using Python for simple scientific problems.\nProblems: More demanding tasks tailored specifically for this seminar, ranging from straightforward problems to more challenging and longer tasks.\n\nThe website has a search option that accommodates free text. This can help locate things (most of the time).\n\n\n\n\nDay 1 is mostly about developing and enhancing your Python knowledge. I think this is also the most demanding day of the seminar because you need to pick and choose from several topics and exercises to match your current knowledge and interest in Python.\nOverall, by the end of the first day, I hope you know enough Python so we can focus on using Python to solve problems in the following days. However, please don’t rush; this is an opportunity to slowly strengthen your command of Python, so take it easy and enjoy!\n\n\nIf you are a beginner, and new to Python, start by working on the examples and simple exercises in sections (A) Setting up and (B) Python | Basics\nIf you are an intermediate used and already know your way around Python,",
    "crumbs": [
      "Overview",
      "Introduction",
      "Instructions"
    ]
  },
  {
    "objectID": "docs/about/instructions.html#things-to-note-about-the-website",
    "href": "docs/about/instructions.html#things-to-note-about-the-website",
    "title": "Instructions",
    "section": "",
    "text": "Need, Good and Nice:When possible, I have categorized the content as Need to Know, Good to Know and Nice to Know. You should typically know everything that is Need to Know and Good to Know. You should look at the Nice to Know portions once you are more comfortable with Python.\nExercises & Problems:\n\nExercises(Simple): These will only reinforce Python syntax and best suit those who are new to Python.\nExercises: These general tasks will help you practice using Python for simple scientific problems.\nProblems: More demanding tasks tailored specifically for this seminar, ranging from straightforward problems to more challenging and longer tasks.\n\nThe website has a search option that accommodates free text. This can help locate things (most of the time).",
    "crumbs": [
      "Overview",
      "Introduction",
      "Instructions"
    ]
  },
  {
    "objectID": "docs/about/instructions.html#recommended-workflow-for-day-1",
    "href": "docs/about/instructions.html#recommended-workflow-for-day-1",
    "title": "Instructions",
    "section": "",
    "text": "Day 1 is mostly about developing and enhancing your Python knowledge. I think this is also the most demanding day of the seminar because you need to pick and choose from several topics and exercises to match your current knowledge and interest in Python.\nOverall, by the end of the first day, I hope you know enough Python so we can focus on using Python to solve problems in the following days. However, please don’t rush; this is an opportunity to slowly strengthen your command of Python, so take it easy and enjoy!\n\n\nIf you are a beginner, and new to Python, start by working on the examples and simple exercises in sections (A) Setting up and (B) Python | Basics\nIf you are an intermediate used and already know your way around Python,",
    "crumbs": [
      "Overview",
      "Introduction",
      "Instructions"
    ]
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/need/1_random_need.html#a-simple-graphical-test",
    "href": "docs/knowledge-lake/random_numbers/need/1_random_need.html#a-simple-graphical-test",
    "title": "Random Numbers (Need)",
    "section": "3.1 A simple graphical test",
    "text": "3.1 A simple graphical test\nAlternatively, we can convince ourselves of the uniformity of the PRNG by plotting the numbers as a scatter plot or a histogram.\n\n\n\n\n\nHere is the code.\n\nn = 10000\nrandom_numbers = np.random.rand(n)\n\nfig, ax = plt.subplots(nrows=1, ncols=2)\n\naxis = ax[0]\naxis.hist(random_numbers, bins=100, alpha=.25)\naxis.set_xlabel(\"Value of random number\")\naxis.set_ylabel(\"Frequency\")\n\naxis = ax[1]\naxis.scatter(range(n), random_numbers, alpha=.25)\naxis.set_xlabel(\"Position in the random number list\")\naxis.set_ylabel(\"Value of random number\")\n\nPlease stop for a moment and make sure you understand what the plots are and what each is telling you. You should talk to someone if you are not sure."
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/need/1_random_need.html#uniformly-beyond-01",
    "href": "docs/knowledge-lake/random_numbers/need/1_random_need.html#uniformly-beyond-01",
    "title": "Random Numbers (Need)",
    "section": "3.2 Uniformly beyond \\([0,1)\\)",
    "text": "3.2 Uniformly beyond \\([0,1)\\)\nOften we need random numbers distributed over a range other than 0 and 1. We can use np.random.uniform() for this. Let’s generate a large set of random numbers in the interval \\([50,100]\\) using np.random.uniform() and create a histogram and scatter plot as we did earlier.\nI don’t need to show the code for plotting again. So, here is the most essential part.\nn = 10000\nrandom_numbers = np.random.uniform(low=50, high=100, size=n)\n\n\n\n\n\nNotice that the numbers are now between 50 and 100!"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/need/1_random_need.html#seeding-a-prng",
    "href": "docs/knowledge-lake/random_numbers/need/1_random_need.html#seeding-a-prng",
    "title": "Random Numbers (Need)",
    "section": "3.3 ‘seeding’ a PRNG",
    "text": "3.3 ‘seeding’ a PRNG\nSometimes, we need PRNG to generate the same set of numbers. For example, when we are debugging some code. You can achieve this by specifying a seed, the integer number that ‘kicks off’ the PRNG algorithm. You do not usually have to seed the PRNG. Instead, it does it automatically by using ‘some’ number (e.g. the number of milliseconds since January 1970) internally.\nYou will better understand what the seed does with the following code.\n\nnp.random.randint(0, 100, 10)     # Ten integers between 0 and 100\n\narray([49, 56,  3, 35, 76, 21, 94, 43, 21, 60])\n\n\n\nnp.random.randint(0, 100, 10)     # Another ten integers between 0 and 100\n\narray([84, 91, 42, 50, 40, 98, 43, 59, 93, 72])\n\n\n\nnp.random.seed(1234)              # Specifying a seed\nnp.random.randint(0, 100, 10)     # Ten integers between 0 and 100\n\narray([47, 83, 38, 53, 76, 24, 15, 49, 23, 26])\n\n\n\nnp.random.seed(1234)\nnp.random.randint(0, 100, 10)     # Same ten integers between 0 and 100\n\narray([47, 83, 38, 53, 76, 24, 15, 49, 23, 26])\n\n\nThat’s enough basic stuff. Let’s start using random numbers!"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/need/1_random_need.html#simulating-a-magic-8-ball",
    "href": "docs/knowledge-lake/random_numbers/need/1_random_need.html#simulating-a-magic-8-ball",
    "title": "Random Numbers (Need)",
    "section": "4.1 Simulating a Magic-8 Ball",
    "text": "4.1 Simulating a Magic-8 Ball\nLet me show you some examples of using random numbers. I want to start with a simple, frivolous one that simulates a Magic-8 ball.\nI will put my simulation in a function called shake_magic_8() as shown below. I borrowed the information on the 20 options of the original Magic-8 ball from the relevant Wikipedia page.\n\ndef shake_magic_8():\n    '''\n    Function to simulate a Magic-8 ball!\n    '''\n    options = ['It is certain.', 'It is decidedly so.',\n               'Without a doubt.', 'Yes definitely.',\n               'You may rely on it.', 'As I see it, yes.',\n               'Most likely.', 'Outlook good.',\n               'Yes.', 'Signs point to yes.',\n               'Reply hazy, try again.', 'Ask again later.',\n               'Better not tell you now.', 'Cannot predict now.',\n               'Concentrate and ask again.', 'Don\\'t count on it.',\n               'My reply is no.', 'My sources say no.',\n               'Outlook not so good.', 'Very doubtful.']\n\n    return np.random.choice(options)\n\nLet’s see if it works.\n\nquestions = ['Will I be pretty?',\n             'Will I be rich?',\n             'Will I be in trouble?']\n\nfor question in questions:\n    print(f'Q: {question}')\n    print(f'A: {shake_magic_8()}\\n')\n\nQ: Will I be pretty?\nA: Outlook not so good.\n\nQ: Will I be rich?\nA: Don't count on it.\n\nQ: Will I be in trouble?\nA: Yes.\n\n\nAlthough the outlook does not look too good for me, I hope you understand what is going on. np.random.choice() picks one of the options randomly. So, getting each is equally likely."
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/need/1_random_need.html#flipping-coins",
    "href": "docs/knowledge-lake/random_numbers/need/1_random_need.html#flipping-coins",
    "title": "Random Numbers (Need)",
    "section": "4.2 Flipping Coins",
    "text": "4.2 Flipping Coins\nNow let us look at flipping coins.\n\nA fair coin\nI can simulate a flip of a fair coin by:\n\nnp.random.choice(['Head', 'Tails'])\n\n'Head'\n\n\nIf I want 10 flips:\n\nno_of_coins = 10\nnp.random.choice(['Head', 'Tails'], no_of_coins)\n\narray(['Head', 'Head', 'Head', 'Head', 'Tails', 'Tails', 'Head', 'Head',\n       'Head', 'Tails'], dtype='&lt;U5')\n\n\nAlternatively, if you and I agree to consider any number in (0, .5] to be Tails and any number in (.5, 1) to be Heads, then the following works too.\n\ndef flip_coins(no_of_coins=1, probability=.5):\n    '''\n    Returns the number of values greater that \n    `probability` (considered as 'Heads').\n    '''\n    results = np.random.rand(no_of_coins)\n    no_of_heads = np.sum(results &gt; probability)\n    return no_of_heads\n\n\nno_of_coins = 1_000\nno_of_heads = flip_coins(no_of_coins)\nprint(f'Number of heads: {no_of_heads/no_of_coins*100:.2f}%')\n\nNumber of heads: 50.80%\n\n\nSince I plan to flip coins a bit more, I have created a function that gives me the number of heads. I have also used probability=.5 because we are dealing with a fair coin.\n\n\nA biased coin\nThe advantage of the second way of simulating coins is that we can easily simulate a biased coin simply by messing with probability. For example, let’s say I want a probability of .7 for a Head. Since we need to increase the chance of a number being considered a Head, we have to make probability=.3. Please make sure this makes sense to you or have a chat with someone to convince yourself.\n\nno_of_coins = 1_000\nno_of_heads = flip_coins(no_of_coins, probability = .3)\nprint(f'Number of heads: {no_of_heads/no_of_coins*100:.2f}%')\n\nNumber of heads: 72.10%\n\n\n\n\nA flipping experiment\nAccess to a good PRNG will allow you to run quick experiments. These will help you gain insights into more theoretical models of the same experiments. So, you can start using computers to better understand science and sometimes even see how the cogs tick in the machine.\nLet me demonstrate this with a simple experiment. Say we flip 10 fair coins in one go. What is the probability that 7 of them will come out Heads? There is an elegant theoretical answer to this question; I will come to that later. But first, let’s see if we can get a solution using our PRNG.\nWe can get an answer if we flip 10 coins several thousand times and count the number of heads. I.e. use flip_coins(10) many times and keep score.\n\nno_of_repeats = 10_000\nresult = [flip_coins(no_of_coins=10) for _ in range(no_of_repeats)]\nno_of_heads, heads_counts = np.unique(result, return_counts=True)\n\nnp.unique() with return_counts=True returns the unique values (of Heads) in the list and how many times they occur. We can get the probabilities by dividing the array with the counts by the number of repeats.\n\nheads_probability = heads_counts/no_of_repeats\n\nLet’s plot this data.\nplt.rcParam['figure.figsize'] = (10,5)\nplt.bar(no_of_heads, heads_counts);\nplt.xlabel('No of heads')\nplt.ylabel(f'Frequency out of {no_of_repeats}')\nplt.table([no_of_heads, heads_counts, heads_probability],\n          rowLabels=['No of Heads', 'Frequency', 'PRNG Probability'],\n          loc='bottom',\n          bbox=[0, -0.5, 1, 0.3])\n\n\n\n\n\nAs you can see, I have also included the various numbers in a Matplotlib table below (I adjusted the bbox values by trial and error.)\nThe theoretical explanation of how many times each head should appear is described by the binomial distribution. Understanding the basics of distributions (i.e. what they are and how to use them) is a critical bit of knowledge for anyone in a university.\nSciPy has various functions to calculate many of these important distributions. Let me show you how to do that now. First, let’s import the machinery for the binomial distribution.\n\nfrom scipy.stats import binom\n\nThe binomial distribution is discrete (i.e. because you have Heads or Tails, no half or quarter Heads). For such distributions, you get the various probabilities using the distribution’s pmf() (probability mass function or discrete density function). Don’t get distracted by the funky names; the pmf() just gives the probabilities for the various possibilities of the discrete distributions.\nThe probability we want is:\n\nbinom.pmf(k=7, n=10, p=.5)\n\n0.11718749999999999\n\n\nI will repeat: the binomial distribution gives us the probability of getting 7 heads when you throw 10 fair (p=.5) coins.\nFor the same completion, I will also calculate the rest of the values. This is absurdly easy:\n\nbinomial_probabilities = binom.pmf(k=no_of_heads, n=10, p=.5)\n\nLet me include these values in the plot to complete the story1"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/need/1_random_need.html#footnotes",
    "href": "docs/knowledge-lake/random_numbers/need/1_random_need.html#footnotes",
    "title": "Random Numbers (Need)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf you like to know how, please look for Matplotlib table().↩︎"
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good_exercises.html",
    "href": "docs/python-basics/05_functions/2_functions_good_exercises.html",
    "title": "Functions (Good) Exercises",
    "section": "",
    "text": "Exercise 1 (Celsius to Fahrenheit or Kelvin) ☻\n\nDevelop a function named convert_celsius() to convert temperatures from Celsius to either Fahrenheit or Kelvin.\nThe function should take two arguments:\n\ntemperature_celsius: The temperature in Celsius.\ntarget_scale (string): The target scale for conversion, with the default value set to 'Fahrenheit'.\n\nThe function should return the temperature in Kelvin if target_scale is 'Kelvin'; otherwise, it should return the temperature in Fahrenheit.\n\n\n\nExercise 2 (Fahrenheit to Celsius or Kelvin) ☻\n\nDevelop a function called convert_fahrenheit() for converting temperatures from Fahrenheit to either Celsius or Kelvin.\nThe function should take two arguments:\n\ntemperature_fahrenheit: The temperature in Fahrenheit.\ntarget_scale (string): The target scale for conversion, defaulting to 'Celsius'.\n\nThe function should return the temperature in Kelvin if target_scale is 'Kelvin'; otherwise, return it in Celsius.\n\n\n\nExercise 3 (General Temperature Conversion) ☻\n\nImplement a function named convert_temperature() to perform general temperature conversions.\nThe function should take three arguments:\n\ntemperature: The temperature to be converted.\nsource_scale (string): The scale of the input temperature (either 'Celsius', 'Fahrenheit', or 'Kelvin').\ntarget_scale (string): The desired scale for the output temperature.\n\nRemember to reuse your previous functions!\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/1_functions_need.html#named-functions",
    "href": "docs/python-basics/05_functions/1_functions_need.html#named-functions",
    "title": "Functions (Need)",
    "section": "1.1 Named Functions",
    "text": "1.1 Named Functions\n\nNamed functions that return\nWe define the function by using the keyword def as follows:\n\ndef greeting(name):\n    if name == 'Batman':\n        return 'Hello Batman! So, nice to meet you!'\n    else:\n        return f'Hello {name}!'\n\nThe function’s name is greeting and it accepts a single argument called name. We can then use the function as:\ngreeting(\"Super Man\")\nor\ngreeting(name=\"Super Man\")\nAs with all structures in Python, notice the keyword def, the colon (:) and the indentation that demarcates the function’s code block. Notice also that I have used the keyword return to get an output from the function. When Python sees a return keyword it jumps out of the function with the return value. You can pick up the returned value by assigning it to a variable or even use it directly like:\ngreet=greeting(name='Super Man')\nprint(greet)\nor this works too:\nprint(greeting(name='Super Man'))\nIncidentally, you can use return only within a function.\nI also like to point out that you can return almost anything! Here is an example of a function that accepts a list and returns the maximum, minimum and mean.\n\ndef basic_stats(numbers):\n    np_numbers = np.array(numbers)\n    my_min = np_numbers.min()\n    my_max = np_numbers.max()\n    my_mean = np_numbers.mean()\n    return my_max, my_min, my_mean\n\nHere is how you can use it:\nlist_min, list_max, list_mean = basic_stats([1, 2, 3, 4, 5])\n\n\nNamed functions that don’t return\nA function does not have to return anything. A good example is print(), which does something but does not return a value. You will often also need functions like these, for instance, to save data to a file. I will show you a few of such functions in later chapters.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/1_functions_need.html#anonymous-functions",
    "href": "docs/python-basics/05_functions/1_functions_need.html#anonymous-functions",
    "title": "Functions (Need)",
    "section": "1.2 Anonymous functions",
    "text": "1.2 Anonymous functions\nAnonymous or lambda functions are suitable for short one-liners. Let me show you two examples.\n\n\n\nThis function accepts a single argument called name.\nmy_short_function = lambda name: f\"Hello {name}!\"\nWe can use it like\nmy_short_function(name=\"Super Man\")\nA lambda function always returns the value of the last statement.\n\n\nThe above example is not a very good ‘anonymous’ one because I have used a name! So let me show you another one where things are really anonymous.\nLet’s say I want to sort the following 2D list.\n\nnumbers=[[9, 0, -10],\n         [8, 1, -11],\n         [7, 2, -12],\n         [6, 3, -13],\n         [5, 4, -14],\n         [4, 5, -15],\n         [3, 6, -16],\n         [2, 7, -17],\n         [1, 8, -18],\n         [0, 9, -19]]\n\nI can use the sorted() function for this. Here are three ways I can use it.\n\n\n\n\n\n\n# Sort by comparing the default key\n# (i.e., the 1st element)\nsorted(numbers)\n\n\n[[0, 9, -19]\n [1, 8, -18]\n [2, 7, -17]\n [3, 6, -16]\n [4, 5, -15]\n [5, 4, -14]\n [6, 3, -13]\n [7, 2, -12]\n [8, 1, -11]\n [9, 0, -10]]\n\n\nNotice that this sorting is based on comparing the first elements of the sub-lists.\n\n\n# Sort by comparing a custom key\n# that uses the 2nd element (index=1)\nsorted(numbers, key=lambda x: x[1])\n\n\n[[9, 0, -10]\n [8, 1, -11]\n [7, 2, -12]\n [6, 3, -13]\n [5, 4, -14]\n [4, 5, -15]\n [3, 6, -16]\n [2, 7, -17]\n [1, 8, -18]\n [0, 9, -19]]\n\n\nIf I want to use some other criteria, then I need to specify a key that sorted() can be used for comparison. As you can see, I have used a lambda function for this.\n\n\n# Sort by comparing a custom key\n# that uses the sum of the elements.\nsorted(numbers, key=lambda x: sum(x))   \n\n\n[[0, 9, -19]\n [1, 8, -18]\n [2, 7, -17]\n [3, 6, -16]\n [4, 5, -15]\n [5, 4, -14]\n [6, 3, -13]\n [7, 2, -12]\n [8, 1, -11]\n [9, 0, -10]]\n\n\nThis is really powerful as I can specify almost any criterion I like. For example, I can sort according to the sum of the elements of the sub-lists.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/1_functions_need.html#optional-arguments",
    "href": "docs/python-basics/05_functions/1_functions_need.html#optional-arguments",
    "title": "Functions (Need)",
    "section": "1.3 Optional arguments",
    "text": "1.3 Optional arguments\nPython allows us to make arguments to our function optional. To do this, we need to give the argument a default value so that it always has something to work with.\n\ndef greeting(name='no one'):\n    if name == 'Batman':\n        return 'Hello Batman! So, nice to meet you!'\n    else:\n        return f'Hello {name}!'\n\nNow we can run this function without an argument, and it will still work without throwing an error.\n\ngreeting()\n\n'Hello no one!'\n\n\nFor another example, let’s look at the documentation for print().\n?print\n    Docstring:\n    print(value, ..., sep=' ', end='\\n', file=sys.stdout, flush=False)\n\n    Prints the values to a stream, or to sys.stdout by default.\n    Optional keyword arguments:\n    file:  a file-like object (stream); defaults to the current sys.stdout.\n    sep:   string inserted between values, default a space.\n    end:   string appended after the last value, default a newline.\n    flush: whether to forcibly flush the stream.\n    Type:      builtin_function_or_method\nYou see that print() can accept other arguments that are optional with default values. However, we can specify them if we like; here goes.\n# Using default values\nprint('I', 'am', 'Batman!')\n# Specifying an optional argument\nprint('I', 'am', 'Batman!', sep='---')  \n\n\n\n\nI am Batman!\n\n\n\n\nI---am---Batman!\n\n\n\n\n\n\n\n\n\n\nRemember\n\n\n\nRemember:\n\nyou can define your own functions,\nfunctions can have optional arguments,\nfunctions don’t always have to return anything.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/1_functions_need.html#the-importance-of-functions",
    "href": "docs/python-basics/05_functions/1_functions_need.html#the-importance-of-functions",
    "title": "Functions (Need)",
    "section": "1.4 The importance of functions?",
    "text": "1.4 The importance of functions?\n\nAn argument for functions\nNow that you know a bit about creating functions, let me highlight why functions are a good idea.\nAbstraction of details The most important benefit of functions goes beyond programming and relates to your ability to strategize. If you break up a complicated solution into modular chunks (i.e., functions), it becomes easier to think about it because you are not dealing with all the details all at once. As a result, it is easier to focus on your overall solution because you are not distracted by unnecessary information. This hiding of ‘stuff’ is called abstraction in computer science lingo. The concept of abstraction can be tricky to grasp. So, let me share an analogy related to driving.\nA vehicle has many ‘abstracted’ systems, amongst which the engine is a good example. You do not need to know the engine’s details (e.g. electric, petrol, diesel, guineapig) to use it. You can use the engine of almost any car because you are not required to know what happens inside. This frees up your resources because you are not distracted by unnecessary details. Of course, there will be times when you want to know how an engine works to pick the best engine.\nReusability of code If you encapsulate a chunk of code in a function, it becomes straightforward to reuse it instead of copying and pasting at different places. This means your code will be shorter and more compact.\nMaintainability of code With functions, your code is easier to change and maintain because you need only make changes in one place, at the function definition.\n\n\nA word of caution\nI have seen many instances where functions are abused; for example, by trying to do too many things or having too many arguments. They can also be overused. Having too many functions can make it difficult to read your code and also increase computational overheads. You will get a better feel for when to use functions with experience, but please bear in mind that functions can be misused.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/3_functions_nice.html#args-kwarg",
    "href": "docs/python-basics/05_functions/3_functions_nice.html#args-kwarg",
    "title": "Functions (Nice)",
    "section": "2.1 *args & **kwarg",
    "text": "2.1 *args & **kwarg\nYou will often see the syntax *args and **kwarg. These stand for arguments and keyword arguments, respectively. They allow us flexible ways of using unpacking and dictionaries to pass information to functions. Let’s see how to do this.\n\n*args\n\n\n\ndef multiply(x, y):\n    return x * y\n\nnumbers = [1, 2]\nmultiply(*numbers)\n\n\n\nWe can use unpacking to make passing arguments to functions a breeze!\nThe * is essential! Without this, Python will assign x=numbers and complain that y is missing.\n\n\n\n2\n\n\n\n\n\n\ndef multiply(*args):\n    result = 1\n    for number in args:\n        result *= number\n\n    return result\n\nnumbers = [1, 2, 3]\nmultiply(*numbers)\nmultiply(1, 2, 3, 4, 5)\n\n\n\nWhat if we want our function to multiply more than two numbers?\n\n\n\n\n6\n\n\nThis will work, too!\n\n\n120\n\n\n\n\n\n\n\n\n\n\n**kwargs\n\n\n\ndef multiply(x, y, z):\n    return x * y * z\n\n# Let's use the function\nnumbers = {'x': 1, 'y': 2, 'z': 3}\nmultiply(**numbers)\n\n\n\nWe can also pass keyword arguments using a dictionary:\nThe ** is essential!\n\n\n\n6\n\n\n\n\n\n\ndef multiply(x, y, z):\n    return x * y * z\n\n# Let's use the function\nnumbers = {'y': 2, 'z': 3}\nmultiply(1, **numbers)\n\n\n\nWe can mix positional arguments and a dictionary!\n\n\n\n6\n\n\n\n\n\n\ndef add_powers(numbers, power):\n    result = 0\n    for number in numbers:\n        result += number**power\n\n    return result\n\n# Let's use the function\nkwargs = {'numbers': [1, 2, 3], 'power': 2}\nadd_powers(**kwargs)\n\n\n\n\n\n\n\n14\n\n\n\n\n\n\ndef add_powers(**kwargs):\n    numbers = kwargs['numbers']\n    power = kwargs['power']\n\n    result = 0\n    for number in numbers:\n        result += number**power\n\n    return result\n\n\n# Let's use the function\nadd_powers(numbers=[1, 2, 3], power=2)\nkwargs = {'numbers': [1, 2, 3], 'power': 2}\nadd_powers(**kwargs)\n\n\n\nWe can also set up our function to accept any keyword arguments!\n\n\n\n\n14\n\n\nThis works too!\n\n\n14",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/3_functions_nice.html#the-problem",
    "href": "docs/python-basics/05_functions/3_functions_nice.html#the-problem",
    "title": "Functions (Nice)",
    "section": "3.1 The Problem",
    "text": "3.1 The Problem\nUsing functions to modularise your code (and your thinking) is good. However, you need to be careful with the type of variables that you pass as arguments. To see what I am talking about, try running the following code. Can you see what is happening?\n\ndef do_something(inside_number, inside_array, inside_list):\n    print('Doing something!')\n    inside_number *= 2\n    inside_array *= 2\n    inside_list *= 2\n\n    print(f\"INSIDE|\\tNumber: {inside_number}(id: {id(inside_number)}), Array: {inside_array}(id: {id(inside_array)}), List: {inside_list}(id: {id(inside_list)})\")\n\noutside_number = 10\noutside_array = np.array([10])\noutside_list = [10]\n\nprint(f\"BEFORE|\\tNumber: {outside_number}(id: {id(outside_number)}), Array: {outside_array}(id: {id(outside_array)}), List: {outside_list}(id: {id(outside_list)})\")\ndo_something(outside_number, outside_array, outside_list)\nprint(f\"AFTER|\\tNumber: {outside_number}(id: {id(outside_number)}), Array: {outside_array}(id: {id(outside_array)}), List: {outside_list}(id: {id(outside_list)})\")\n\n\n\nBEFORE| Number: 10(id: 131280900829160), Array: [10](id: 131279810396208), List: [10](id: 131279628717440)\n\n\nDoing something!\nINSIDE| Number: 20(id: 131280900829480), Array: [20](id: 131279810396208), List: [10, 10](id: 131279628717440)\n\n\nAFTER|  Number: 10(id: 131280900829160), Array: [20](id: 131279810396208), List: [10, 10](id: 131279628717440)\n\n\nSo, the function has changed the values of some variable outside the function! But, not all variables are affected.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/3_functions_nice.html#an-explanation",
    "href": "docs/python-basics/05_functions/3_functions_nice.html#an-explanation",
    "title": "Functions (Nice)",
    "section": "3.2 An Explanation",
    "text": "3.2 An Explanation\nFor ‘immutable’ variables, what happens inside the function does not change the variable outside. In other languages, this behaviour is called passing by value.\nFor ‘mutable’ variables, what happens inside the function does change the variable outside. In other languages, this behaviour is called passing by reference.\nSo, in Python, you must be very careful about the mutability of the variable you are passing. Otherwise, you will spend a long time trying to understand why your code is acting weird.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/3_functions_nice.html#a-list-of-exceptions",
    "href": "docs/python-basics/05_functions/3_functions_nice.html#a-list-of-exceptions",
    "title": "Functions (Nice)",
    "section": "4.1 A list of exceptions",
    "text": "4.1 A list of exceptions\nHere is an incomplete list of exceptions2. You can find more details at the Python documentation pages.\n\n\n\n\n\n\n\n\nException\nDescription\n\n\n\n\nAssertionError\nRaised when the assert statement fails.\n\n\nAttributeError\nRaised on the attribute assignment or reference fails.\n\n\nEOFError\nRaised when the input() function hits the end-of-file condition.\n\n\nFloatingPointError\nRaised when a floating point operation fails.\n\n\nImportError\nRaised when the imported module is not found.\n\n\nIndexError\nRaised when the index of a sequence is out of range.\n\n\nKeyError\nRaised when a key is not found in a dictionary.\n\n\nNameError\nRaised when a variable is not found in the local or global scope.\n\n\nOSError\nRaised when a system operation causes a system-related error.\n\n\nOverflowError\nRaised when the result of an arithmetic operation is too large to be represented.\n\n\nRuntimeError\nRaised when an error does not fall under any other category.\n\n\nSyntaxError\nRaised by the parser when a syntax error is encountered.\n\n\nIndentationError\nRaised when there is an incorrect indentation.\n\n\nSystemError\nRaised when the interpreter detects internal error.\n\n\nSystemExit\nRaised by the sys.exit() function.\n\n\nTypeError\nRaised when a function or operation is applied to an object of an incorrect type.\n\n\nUnboundLocalError\nRaised when a reference is made to a local variable in a function or method, but no value has been bound to that variable.\n\n\nValueError\nRaised when a function gets an argument of correct type but improper value.\n\n\nZeroDivisionError\nRaised when the second operand of a division or module operation is zero.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/3_functions_nice.html#handling-specific-exceptions",
    "href": "docs/python-basics/05_functions/3_functions_nice.html#handling-specific-exceptions",
    "title": "Functions (Nice)",
    "section": "4.2 Handling specific exceptions",
    "text": "4.2 Handling specific exceptions\nI was sloppy in my try-exept example in the last chapter. I could have been more specific about the type of exception. A better version of the code is:\ntry:\n    number=input(\"Give me a number and I will calculate its square.\")\n    square=int(number)**2\n    print(f'The square of {number} is {square}!')\nexcept ValueError:\n    print(f\"Oh oh! I cannot square {number}!\")",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/3_functions_nice.html#try-also-has-an-else-and-finally",
    "href": "docs/python-basics/05_functions/3_functions_nice.html#try-also-has-an-else-and-finally",
    "title": "Functions (Nice)",
    "section": "4.3 try also has an else and finally",
    "text": "4.3 try also has an else and finally\nThe try-except statement also has optional else and finally blocks. else runs only if everything works smoothly, and finally always runs at the end.\nHere is an example:\ntry:\n    number=input(\"Give me a number and I will calculate its square.\")\n    square=int(number)**2\n    print(f'The square of {number} is {square}!')\nexcept ValueError:\n    print(f\"Oh oh! I cannot square {number}!\")\nelse:\n    print('Yeah! Things ran without a problem!')\nfinally:\n    print('Okay, looks like everything is done!')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/3_functions_nice.html#footnotes",
    "href": "docs/python-basics/05_functions/3_functions_nice.html#footnotes",
    "title": "Functions (Nice)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nand classes↩︎\nborrowed from here↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good_exercises.html",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good_exercises.html",
    "title": "Storing Data (Good) Exercises",
    "section": "",
    "text": "Exercise 1 (Total recall) ☻\nPurely from memory, write short descriptions of the following terms:\n\n\n\n\nTerm\nBrief description\n\n\n\n\nSubsetting\n\n\n\nIndexing\n\n\n\nSlicing\n\n\n\nMasking\n\n\n\n\n\nIf you cannot recall the answers, please refer to the notes and put this information you could not recall in italics.\n\n\nExercise 2 (Show me the ‘odd’ letters) ☻\nnp_array_2d = np.array([[1, \"A\"], [3, \"C\"], [2, \"B\"], [4, \"D\"],\n                        [5, \"E\"], [7, \"G\"], [6, \"F\"], [8, \"H\"],\n                        [10, \"J\"], [9, \"I\"]])\nUse masking to subset the letters that correspond to the odd numbers. I.e., get the result [A, C, E, G, I].\nThis is a slightly tricky problem because arrays are fussy about type. So, let me give you a recipe to solve this problem.\n\nSubset all the first elements.\n\nYou should get array(['1', '3', '2', ..., '10', '9'])\n\nConvert this to integers using astype(int)\n\nYou must look up how astype() works.\n\nUse % to get the remainder for division by 2.\n\nYou should get array([1, 1, 0, ..., 0, 1]).\n\nUse the previous result to create a mask that checks if the remainder is zero or not\n\nYou should get array([True, True, False, ..., False, True]).\nNow you have identified the locations of the odd numbers.\n\nUse the mask and extract the corresponding second elements.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need_exercises.html",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need_exercises.html",
    "title": "Storing Data (Need) Exercises",
    "section": "",
    "text": "Exercise 1 (Total recall?) ☻\nPurely from memory, jot down:\n\nTwo similarities between lists and arrays.\nTwo differences between lists and arrays.\nWhat is a dictionary?\n\nIf you cannot recall the answers, please refer to the course notes and put this information you could not recall in italics.\n\n\nExercise 2 (Indexing) ☻\nModify the following code to print out all elements with an odd number. I have done the one corresponding to i9 for you.\n\npy_list = [\"a1\", \"b2\", \"c3\", \"d4\", \"e5\", \"f6\", \"g7\", \"h8\", \"i9\", \"j10\"]\n                    # Prints 'a1'\n                    # Prints 'c3'\n                    # Prints 'e5'\n                    # Prints 'g7'\nprint(py_list[8])   # Prints 'i9'\n\ni9\n\n\n\n\nExercise 3 (Index again) ☻\nGiven the following list in Python:\nelements = ['Hydrogen',\n            'Helium', 'Lithium',\n            'Beryllium', 'Boron', 'Carbon',\n            'Nitrogen', 'Oxygen',\n            'Fluorine',\n            'Neon']\n\nAccess and print the element at index 4 using forward indexing.\nAccess and print the element at index 4 from the end of the list using reverse indexing.\n\n\n\nExercise 4 (How many ones) ☻\nUse the concepts you learned in this chapter to determine the number of 1’s in the following list of numbers.\nnumbers=[45, 60, 1, 30, 96, 1, 96, 57, 16, 1,\n        99, 62, 86, 43, 42, 60, 59, 1, 1, 35,\n        83, 47, 34, 28, 68, 23, 22, 92, 1, 79,\n        1, 29, 94, 72, 46, 47, 1, 74, 32, 20,\n        8, 37, 35, 1, 89, 29, 86, 19, 43, 61]                  \nHere are some hints:\n\nUse a NumPy array.\nAsk a question.\nFalse is considered 0, and True is considered 1 by sum().\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html",
    "title": "Files, Folders & OS (Need)",
    "section": "",
    "text": "From xkcd",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#path",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#path",
    "title": "Files, Folders & OS (Need)",
    "section": "1.1 Path",
    "text": "1.1 Path\nWhen dealing with computers, you will often encounter the term ‘path’. The path is simply a way to specify a location on your computer. It is like an address, and if you follow the path, it will take you to your file or folder.\nLike specifying location, you can specify your path absolutely or relatively. So, for example, I can specify that SPS is located on level 3 of block S16. However, if I am already on Level 5 of S16, I can say, go two floors down. The former is an absolute path, and the latter is relative. I have always found it easier to use relative paths, especially if I later want to move my folders about.\n\n\n\n\n\n\nRemember\n\n\n\nRemember that the path tells us how to find a file or folder and that you can specify it absolutely or relatively.\n\n\nFor example, here is an absolute path to a file on the Desktop on a Windows machine.\nC:\\\\Users\\Chammika\\Desktop\\data-01.txt",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#more-about-relative-paths",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#more-about-relative-paths",
    "title": "Files, Folders & OS (Need)",
    "section": "1.2 More about relative paths",
    "text": "1.2 More about relative paths\nWhen dealing with relative paths, you will find it helpful to know . and .. notation.\n\n\n\n\nNotation\nMeaning\n\n\n\n\n.\n‘this folder’\n\n\n..\n‘one folder above’\n\n\n\n\nSo,\n\n.\\data-files\\data-01.txt means the file data-01.txt in the folder data-files in the current folder.\n..\\data-files\\data-01.txt means the file data-01.txt in the folder data-files located in the folder above.\n\n\n\n\n\n\n\nRemember\n\n\n\nRemember . means current folder, and .. means one folder up.\n\n\n\n\nmacOS or Linux\nmacOS and Linux allow you to use ~ to refer to your home directory. So, for example, you can access the Desktop in these systems ‘relatively’ with ~/Desktop. So, I can look for a file in my Desktop using:\n~\\Desktop\\data-01.txt",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#path-separator",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#path-separator",
    "title": "Files, Folders & OS (Need)",
    "section": "1.3 Path separator",
    "text": "1.3 Path separator\nToday’s major OSs (Windows, macOS, Linux) offer similar graphical environments. However, one of the most striking differences between Windows and macOS (or Linux) is the path separator.\nWindows uses \\ as the path separator while macOS (or Linux) uses /. So, the absolute path to a file on the Desktop on each of these systems will look like this:\n\n\n\nWindows\nC:\\\\Users\\chammika\\Desktop\\data-01.txt\n\n\nmacOS (or Linux)\n/Users/chammika/Desktop/data-01.txt\n\n\n\nIf you want to share your code and want it to work on both systems, you must not hardcode either path separator. Later, I will show you how to use the Python os package to fix this problem.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#text-files-vs.-binary-files",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#text-files-vs.-binary-files",
    "title": "Files, Folders & OS (Need)",
    "section": "1.4 Text files vs. Binary files",
    "text": "1.4 Text files vs. Binary files\nYou can think of all files on your computer as being either text files or binary files. Text files are simple and can be opened, and their contents examined by almost any software (e.g., Notepad, TextEdit, Jupiter,…). Examples of text file formats are .txt, .md or .csv.\nBinary files, in contrast, require some processing to make sense of what they contain. For example, if you look at the raw data in a .png file, you will see gibberish. In addition, some binary files will only run on specific OSs. For example, the Excel.app on a Mac will not run on Windows, nor will the Excel.exe file run on macOS (or Linux). Some reasons for having binary files are speed and size; text files, though simple, can get bulky.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#extensions",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#extensions",
    "title": "Files, Folders & OS (Need)",
    "section": "1.5 Extensions",
    "text": "1.5 Extensions\nFiles are usually named to end with an extension separated from the name by a . like name.extension. This extension lets the OS know what software or app to use to extract the details in a file. For example, a .xlsx means use Excel or .pptx means use PowerPoint. Be careful about changing the extension of a file, as it will make your OS cough and throw a fit. If you don’t believe me, try changing a .xlsx to .txt and double-click.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#reading-data",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#reading-data",
    "title": "Files, Folders & OS (Need)",
    "section": "2.1 Reading data",
    "text": "2.1 Reading data\nHere is what you would typically do to read a text file.\nwith open('spectrum-01.txt', 'r') as file:\n    file_content = file.read()\n\nprint(file_content)\nThe open() function ‘opens’ your file. The 'r' specifies that I only want to read from the file. Using with frees you from worrying about closing the file after you are done.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#writing-data",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#writing-data",
    "title": "Files, Folders & OS (Need)",
    "section": "2.2 Writing data",
    "text": "2.2 Writing data\nNow, let’s write the following into a file.\n\ntext = 'Far out in the uncharted backwaters of the unfashionable end of the western spiral arm of the Galaxy lies a small unregarded yellow sun.\\nOrbiting this at a distance of roughly ninety-two million miles is an utterly insignificant little blue green planet whose ape-descended life forms are so amazingly primitive that they still think digital watches are a pretty neat idea.'\n\nI will use two writing methods just so that I can show you how they work.\n\nWriting to a file in one go\nFirst, let’s write everything in one go.\nwith open('my-text-once.txt', 'w') as file:\n    file.write(text)\nYou should now have a file my-text-once.txt in your directory. You should open it to take a look. By the way, the 'w' indicates that I am opening the file for writing.\n\n\nWriting to a file, line by line\nLet me show you how to write a line at a time. This is useful when dealing with data generated on the fly. Since I don’t have such data now, I will split the lines of the previous text [The contents in both files will be slightly different. However, this is not a time to worry about that.].\nwith open('my-text-lines.txt', 'w') as file:\n    for line in text.splitlines():\n        file.writelines(line)\nI must add that writing to a file is a very slow operation. So, it will slow things down if you do it in a loop.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#creating-folders",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#creating-folders",
    "title": "Files, Folders & OS (Need)",
    "section": "5.1 Creating folders",
    "text": "5.1 Creating folders\nYou can create a folder programmatically using os.mkdir(). This is very useful because you can write a tiny bit of code to quickly organise your data. For example, let’s say we need to store information about the people ‘John’, ‘Paul’ and ‘Ringo’. I can quickly create some folders for this by:\n\nos.mkdir('people')\n\nfor person in ['John', 'Paul', 'Ringo']:\n    path = os.path.join('people', person)\n    print(f'Creating {path}')\n    os.mkdir(path)\n\nCreating people/John\nCreating people/Paul\nCreating people/Ringo\n\n\nYou don’t need the print() statement. I have included it so I have some feedback on what is (or is not) happening.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#checking-for-existence",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#checking-for-existence",
    "title": "Files, Folders & OS (Need)",
    "section": "5.2 Checking for existence",
    "text": "5.2 Checking for existence\nPython will complain if you try to run this code twice, saying that the file (yes, Python refers to folders as files) already exists. So, when you create resources, it is a good idea to check if they already exist. There are two ways to do this: use try-except with the FileExistsError or use os.path.exists().\n\nUsing try-except\nfor person in ['John', 'Paul', 'Ringo']:\n    path = os.path.join('people', person)\n    try:\n        os.mkdir(path)\n        print(f'Creating {path}')\n    except FileExistsError:\n        print(f'{path} already exists; skipping creation.')\n\n\nUsing os.path.exists()\nfor person in ['John', 'Paul', 'Ringo']:\n    path = os.path.join('people', person)\n    if os.path.exists(path):\n        print(f'{path} already exists; skipping creation.')\n    else:\n        os.mkdir(path)\n        print(f'Creating {path}')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need.html#copying-files",
    "href": "docs/python-basics/06_this-n-that/1_os_need.html#copying-files",
    "title": "Files, Folders & OS (Need)",
    "section": "5.3 Copying files",
    "text": "5.3 Copying files\nLet me show you how to copy files programmatically.\nFirst, there should be a copy of the 73 logo (sp2273_logo.png) in the current folder. Then, I will copy this into the folders I created for ‘John’, ‘Paul,’ and ‘Ringo’.\n\nfor person in ['John', 'Paul', 'Ringo']:\n    path_to_destination = os.path.join('people', person)\n    shutil.copy('sp2273_logo.png', path_to_destination)\n    print(f'Copied file to {path_to_destination}')\n\n'people/John/sp2273_logo.png'\nCopied file to people/John\n'people/Paul/sp2273_logo.png'\nCopied file to people/Paul\n'people/Ringo/sp2273_logo.png'\nCopied file to people/Ringo\n\n\nLet’s say I want all the images in a sub-folder called imgs in each person’s directory. I can do this by first creating the folders imgs and then moving the logo file into that folder.\n\nfor person in ['John', 'Paul', 'Ringo']:\n    # Create folder 'imgs'\n    path_to_imgs = os.path.join('people', person, 'imgs')\n    if not os.path.exists(path_to_imgs):\n        os.mkdir(path_to_imgs)\n\n    # Move logo file\n    current_path_of_logo = os.path.join('people', person, 'sp2273_logo.png')\n    new_path_of_logo = os.path.join('people', person, 'imgs', 'sp2273_logo.png')\n\n    shutil.move(current_path_of_logo, new_path_of_logo)\n    print(f'Moved logo to {new_path_of_logo}')\n\n'people/John/imgs/sp2273_logo.png'\nMoved logo to people/John/imgs/sp2273_logo.png\n'people/Paul/imgs/sp2273_logo.png'\nMoved logo to people/Paul/imgs/sp2273_logo.png\n'people/Ringo/imgs/sp2273_logo.png'\nMoved logo to people/Ringo/imgs/sp2273_logo.png\n\n\n\n\n\n\n\n\nFYI\n\n\n\nYou can do all these extremely fast using only the terminal and its loops structure. Just letting you know if you want to explore on your own.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "Files, Folders & OS (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html",
    "title": "Plotting (Need)",
    "section": "",
    "text": "Matplotlib unleashed! (Image from Python Data Visualization with Matplotlib — Part 1)",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html#lets-look-at-some-code.",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html#lets-look-at-some-code.",
    "title": "Plotting (Need)",
    "section": "1.1 Let’s look at some code.",
    "text": "1.1 Let’s look at some code.\nShown below is some code and the resulting plot.\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5, 6]\ny_1 = [0, 2, 4, 6, 8, 10, 12]\ny_2 = [0, 3, 6, 9, 12, 15, 18]\n\n# Let's start plotting\nplt.plot(x, y_1, label='Y values',\n         color='red', linestyle='dashed')\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\n\n\n\n\n\n\n\n\n\n\nCopy, paste, and run this code snippet to generate the plot. Then, spend a few minutes perusing the code to figure out what each line achieves in the plot. A simple way to do this is by commenting out some lines to turn off their contributions or changing some parameters (e.g., loc to bottom left) and numbers (e.g., alpha to .8). It will help you learn faster if you try to predict what will happen before running the code.\n\nThings to note\n\nYou can use the following abbreviations if you like:\n\n\n\n\n\nLong form\nAbbreviation\n\n\n\n\ncolor\nc\n\n\nlinestyle\nls\n\n\nlinewidth\nlw\n\n\n\n\nso, both the following lines produce the same result.\nplt.plot(x, y, color='red', linestyle='dashed', linewidth=2)\nplt.plot(x, y, c='red', ls='dashed', lw=2)\n\nJupyter is an interactive environment, so you will see an output even if you omit plt.show(). However, it is good practice to include this line anyway so your code will also work in non-interactive environments (for instance, when the script is run directly from the command line).\n\n\n\n\n\n\n\n\nThe plotting functions usually have default values for the styling parameters. So, if you wish, you can keep it simple and plot just using:\nplt.plot(x, y_1, y_2)\nThe resulting plot is shown alongside.\nYou can split the arguments into separate lines to improve readability.So, both of the following forms are acceptable.\n\n\n\n\n\n\n\n\nplt.plot(x, y, color='red', linestyle='dashed', linewidth=2)\nplt.plot(x, y_1, label='Y values',\n           color='red', linestyle='dashed')\n\nThe order of how you specify the keyword arguments (color, linewidth, …) does not matter.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html#adding-another-plot",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html#adding-another-plot",
    "title": "Plotting (Need)",
    "section": "1.2 Adding another plot",
    "text": "1.2 Adding another plot\n\n\n\n\n\n\nYou can add another plot command to the graph to plot the data of y_2 in blue by adding the following line.\nplt.plot(x, y_2,\n         label='Y2 values', color='blue')\nOnce you do this, the code will look like this:\n\n\n\n\n\n\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5, 6]\ny_1 = [0, 2, 4, 6, 8, 10, 12]\ny_2 = [0, 3, 6, 9, 12, 15, 18]\n\n# Lets start plotting\nplt.plot(x, y_1, label='Y1 values', color='red', linestyle='dashed')\nplt.plot(x, y_2, label='Y2 values', color='blue')\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html#yet-another-plot-but-with-error-bars",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html#yet-another-plot-but-with-error-bars",
    "title": "Plotting (Need)",
    "section": "1.3 Yet another plot but with error bars",
    "text": "1.3 Yet another plot but with error bars\n\n\n\n\n\n\nLet me add another plot, but this time I will also include \\(x\\) and \\(y\\) error bars for the points. The plotting command I need to use for this is called errorbar().\nplt.errorbar(x, y_3,\n             xerr=x_error, yerr=y_error,\n             label=\"Y3 with errors\",\n             color=\"green\")\nOnce you do this, the code will look like this:\n\n\n\n\n\n\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5, 6]\ny_1 = [0, 2, 4, 6, 8, 10, 12]\ny_2 = [0, 3, 6, 9, 12, 15, 18]\ny_3 = [0, 4, 8, 12, 16, 20, 24]\nx_error, y_error = .1, 0.75\n\n# Lets start plotting\nplt.plot(x, y_1, label='Y1 values', color='red', linestyle='dashed',)\nplt.plot(x, y_2, label='Y2 values', color='blue', )\nplt.errorbar(x, y_3, xerr=x_error, yerr=y_error,\n             label='Y3 with errors', color='green')\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(loc='upper left')\n\nIn this example, I have provided constant errors for all the points. However, you can also provide a list of errors so that each will have a different length.\n\n\n\n\n\n\n\nPlease note\n\n\n\nFrom here onwards, I will show a minimum of code related to styling to reduce clutter. You should, however, still retain them to get nice-looking plots.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html#adding-mathematical-functions",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html#adding-mathematical-functions",
    "title": "Plotting (Need)",
    "section": "2.1 Adding mathematical functions",
    "text": "2.1 Adding mathematical functions\nOne of the advantages of NumPy arrays is that they allow us to generate data-related mathematical functions easily. Let’s reuse our previous code to plot \\(x^2\\) and \\(\\sin(x)\\)\nx = np.array([0, 1, 2, 3, 4, 5, 6])\n\nx2 = x**2                  # The math stuff\nsin_x = np.sin(x)\n\nplt.plot(x, x2, label='x^2',\n         color='red', linestyle='dashed', )\nplt.plot(x, sin_x, label='sin(x)',\n         color='blue')\nplt.legend()                                 \n\n\n\n\n\n\n\n\n\n\nAlas, our plot does not look good because \\(\\sin(x)\\) lies between \\(\\pm 1\\), but \\(x^2\\) has no such bounds. One way to fix this is to add another y-axis that shares the same x-axis.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html#plotting-twinx",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html#plotting-twinx",
    "title": "Plotting (Need)",
    "section": "We need another axis!",
    "text": "We need another axis!\nMatplotlib offers a variety of ways to have multiple axes. The simplest way is to have another y-axis that shares the same x-axis. We can use the command twinx() for this.\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Two y-axes and fewer points.\n\n\n\n\n\n\n\n\n\n\n\nFigure 2: Using np.linspace().\n\n\n\n\n\n\n\nx = np.array([0, 1, 2, 3, 4, 5, 6])\nx2 = x**2\nsin_x = np.sin(x)\n\nplt.plot(x, x2, label='x^2',color='red', linestyle='dashed')\nplt.legend(loc='lower left')                                  # For y-axis 1\n\nplt.twinx()                                                   # This creates a new y-axis \n                                                              # for the plots that comes after\nplt.plot(x, sin_x, label='sin(x)',color='blue', )\nplt.legend(loc='lower right')                                 # For y-axis 2\n\n\nThings to note\n\nWe now have two legend() calls, one for each axis.\nour plot still does not look good because we have only a few points. Let’s use np.linspace to fix this with:\nx = np.linspace(0, 6, 100)\nThe improvement is seen in the plot on the right.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html#plotting-data-from-files",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html#plotting-data-from-files",
    "title": "Plotting (Need)",
    "section": "4.1 Plotting data from files",
    "text": "4.1 Plotting data from files\nPlotting data stored in a file (e.g., spreadsheet, text file, database) is a routine task for a scientist. In fact, the first thing you should do with any data is to look at it with a simple plot.\nFor the rest of this section, I will use the Earth’s land temperature data from the Berkeley Earth website. Please visit the site (Global Warming \\(\\rightarrow\\) Data Overview) and download the average temperature data for Daily Land. The original name of the file should be Complete_TAVG_daily.txt\n\n\n\n\n\n\ndata = np.loadtxt('Complete_TAVG_daily.txt',\n                   skiprows=24)\ndate = data[:, 0]\nanomaly = data[:, -1]\n\nplt.plot(date, anomaly, alpha=.5)\nplt.ylim([-8, 8])\nI have used a small alpha value to soften the colour of the plot and made the plot range symmetrical in the \\(y\\) direction.\n\n\n\n\n\n\nLet’s add a horizontal line at the zero value to highlight the trend shown by the data.The hlines() function needs a \\(y\\)-value and starting and ending values for \\(x\\).\nplt.hlines(0, date[0], date[-1], linestyle='--', colors='grey')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need.html#styles",
    "href": "docs/python-basics/07_plotting/1_plotting_need.html#styles",
    "title": "Plotting (Need)",
    "section": "4.2 Styles",
    "text": "4.2 Styles\nUnlike myself, most people (very sensibly) might just want a decent-looking plot without spending time customising it. To facilitate this Matplotlib offers some standard style templates (see here). I am going to use the one called fivethirtyeight.\nplt.style.use('fivethirtyeight')\nThis line must be included right at the top!\nEt voila! Do you see global warming?!\n\nHere is the complete code for the final product.\n\nplt.style.use('fivethirtyeight')\n\ndata = np.loadtxt('Complete_TAVG_daily.txt', skiprows=24)\n\ndate = data[:, 0]\nanomaly = data[:, -1]\n\nplt.plot(date, anomaly, alpha=.5)\nplt.hlines(0, date[0], date[-1], linestyle='--', colors='grey')\nplt.ylim([-8, 8])\n\nplt.xlabel('Date')\nplt.ylabel('Temperature Anomaly')\nplt.title('Temperature anomaly\\n(Relative to  average from Jan 1951 - Dec 1980.)')\n\n\nxkcd!\nOkay, since we are talking about styles, I must tell you that the developers of Matplotlib have a healthy sense of humour and have included the option of making your plots in the xkcd style. To enable this, just run plt.xkcd() instead of setting a style. Here is what the previous plot looks like using the xkcd style. Cool!\n\n\n\nResetting styles\nIf you want to reset things and jump out of this style, you need to set the default style using:\nplt.style.use('default')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/1_plotting_need_exercises.html",
    "href": "docs/python-basics/07_plotting/1_plotting_need_exercises.html",
    "title": "Plotting (Need) Exercises",
    "section": "",
    "text": "Exercise 1 (Fill in the blanks) Fill in the blanks(indicated with a ?), so the code below will produce the plot shown.\n\n\n\n\n\n\n# Some data for plotting\nx = [0, 1, 2, 3, 4, 5]\ny = [0, 4, 8, 12, 16, 20]\ny_err = [0.0, 0.5, 1.0, 1.5, 2.0, 2.5]\nx_err = .25\n\nplt.errorbar(x, y, \n             xerr=?, yerr=?,\n             color=?, linestyle=?,\n             marker=?, markerfacecolor=?,\n             ecolor=?,capsize=5,\n             label=?)\nplt.xlabel('x-values')\nplt.ylabel('y-values')\nplt.title('X vs Y')\nplt.grid(alpha=.25)\nplt.legend(?)\nplt.show()\n\n\n\n\n\n\n\n\nExercise 2 (A simple mathematical plot)  \n\n\n\n\n\n\n\nUse NumPy to generate \\(x\\) and \\(y\\) data suitable for plotting the graph of the function: \\[ y = e^{-x/10}\\sin(x)\\]\nfor values of \\(x\\) in the range \\(0\\) to \\(50\\).\nCustomise your plot so that:\n\nThe x and y axes have labels of fontsize of 15\nThe x and y axes labels are in the color, darkorange.\nThere is a grid with an opacity of 25%.\nIndicate the equation of the function in the title with a font size of 20.Hint: Look at Writing mathematical expressions in Matplotlib.\nChange the \\(y\\) limit (using ylim) to \\([-1,1]\\)\n\n\nIn the end, your plot should look like the one shown alongside.\n\n\n\n\n\n\n\nContributed by Darren Teo\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/2_basics_good_exercises.html",
    "href": "docs/python-basics/02_basics/2_basics_good_exercises.html",
    "title": "Fundamentals (Good) Exercises",
    "section": "",
    "text": "Exercise 1 (What is your grade?)  \n\nStep 1Task\n\n\nPython allows you to solicit information from the user.\nOne way to do this is using the input() function. Here is an example of how to use it.\nuser_input = input('Give me a number?')\nprint('You entered', user_input)\nRun this code and explore.\n\n\nWrite a Python program that takes a numerical grade (0-100) as input and outputs the corresponding letter grade based on the following criteria:\n\n\n\n\nGrade\nScore Range\n\n\n\n\nA\n70 - 100\n\n\nB\n50 - 69\n\n\nC\n35 - 49\n\n\nFail\n0 - 34\n\n\n\n\nNote:\n\nHere is an example of the type of exchange expected.\nEnter the student's score: 85\nThe student's letter grade is: A\nEnsure your program handles unexpected inputs gracefully and displays a relevant error message.\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercises (Simple)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/1_basics_need_exercises.html",
    "href": "docs/python-basics/02_basics/1_basics_need_exercises.html",
    "title": "Fundamentals (Need) Exercises",
    "section": "",
    "text": "Exercise 1 (Total recall?) ☻\n\nPurely from memory, list as many of the basic Python features I mentioned in my notes as you remember.\nUse a Markdown cell for this list.\nNow, visit the notes and complete the list with the ones you missed.\nIndicate those you missed by putting them in italics.\n\n\n\nExercise 2 (Debug me) ☻\nFix (debug) the following code to create a Pythagorean triple 3, 4, 5 (because \\(3^2+4^2=5^2\\)).\nx, y = 3, 4\n        z = sqrt(x*2 + y**2)\n    Print(x, y, z)\n\n\nExercise 3 (In your own words) ☻\nUsing your own words, write a single sentence to describe what each of the following means or the role they serve in Python.\nPlease use a Markdown table for this.\n\n\n\n\n\n\n#\nTerm\nDescription\n\n\n\n\n1\nFunction\n\n\n\n2\nArguments\n\n\n\n3\nComments\n\n\n\n4\nIndentations\n\n\n\n5\nPackages\n\n\n\n6\n.\n\n\n\n7\n:\n\n\n\n8\n[]\n\n\n\n9\n[[[]]]\n\n\n\n10\n{}\n\n\n\n\n\n\n\n\n\nExercise 4 (More than one way to divide) ☻\nProgramming languages usually offer multiple options for dividing one number by another. Shown below are three such options. Either by observation (i.e., trial and error), Googling or discussing with a friend, figure out what each one does.\nI recommended the trial and error approach first so that you get a feel for how to use Python.\nIndicate your answer by writing a comment.\n5/2           # What do I do?\n5//2          # What do I do?\n5%2           # What do I do?\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercises (Simple)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/2_loops_good.html#basic-syntax",
    "href": "docs/python-basics/04_loops/2_loops_good.html#basic-syntax",
    "title": "Loops (Good)",
    "section": "2.1 Basic syntax",
    "text": "2.1 Basic syntax\n[number for number in range(5)]\n\n\n\nThe adjoining creates a simple list with numbers from 0 to 4.The syntax is very similar to that of a for loop. You just need to put the thing you want as an output at the front.\n\n\n\n[0, 1, 2, 3, 4]\n\n\n\n\n[number**2 for number in range(5)]\n\n\n\nIf you want to create a list of squares, we just have to:\n\n\n\n[0, 1, 4, 9, 16]",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/2_loops_good.html#list-comprehension-with-conditions",
    "href": "docs/python-basics/04_loops/2_loops_good.html#list-comprehension-with-conditions",
    "title": "Loops (Good)",
    "section": "2.2 List comprehension with conditions",
    "text": "2.2 List comprehension with conditions\n[number for number in range(10) if number % 2 ==0]\n\n\n\nList comprehension has several useful features. One such allows us to specify a condition. Here is an example:\n\n\n\n[0, 2, 4, 6, 8]",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/2_loops_good.html#for-with-unpacking",
    "href": "docs/python-basics/04_loops/2_loops_good.html#for-with-unpacking",
    "title": "Loops (Good)",
    "section": "3.1 for with unpacking",
    "text": "3.1 for with unpacking\nPython allows a neat trick called unpacking, which works like this:\n\nx, y, z=[1, 2, 3]\nprint(f'x = {x}, y = {y}, z = {z}')\n\nx = 1, y = 2, z = 3\n\n\nUnpacking can be put to good use (for example) when we are dealing with 2D list. We can combine unpacking with a for loop to extract elements as follows:\n\npy_superhero_info = [['Natasha Romanoff', 'Black Widow'],\n                     ['Tony Stark', 'Iron Man'],\n                     ['Stephen Strange', 'Doctor Strange']]\n\nfor real_name, super_name in py_superhero_info:\n    print(f\"{real_name} is Marvel's {super_name}!\")\n\nNatasha Romanoff is Marvel's Black Widow!\nTony Stark is Marvel's Iron Man!\nStephen Strange is Marvel's Doctor Strange!",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/2_loops_good.html#for-with-zip",
    "href": "docs/python-basics/04_loops/2_loops_good.html#for-with-zip",
    "title": "Loops (Good)",
    "section": "3.2 for with zip()",
    "text": "3.2 for with zip()\nLet’s revisit the example from the previous chapter that had two lists of real and superhero names that we used to print. There is yet another way to solve this task using a function called zip(). zip() is a neat function that can do some cool things. For the moment let me show you how to use zip() to combine two lists.\n\nsuper_names = [\"Black Widow\", \"Iron Man\", \"Doctor Strange\"]\nreal_names = [\"Natasha Romanoff\", \"Tony Stark\", \"Stephen Strange\"]\n\nfor real_name, super_name in zip(real_names,super_names):\n    print(f\"{real_name} is Marvel's {super_name}!\")\n\nNatasha Romanoff is Marvel's Black Widow!\nTony Stark is Marvel's Iron Man!\nStephen Strange is Marvel's Doctor Strange!\n\n\nThis is by far the most elegant solution we have for using multiple lists with a for loop.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/2_loops_good.html#for-with-dictionaries",
    "href": "docs/python-basics/04_loops/2_loops_good.html#for-with-dictionaries",
    "title": "Loops (Good)",
    "section": "3.3 for with dictionaries",
    "text": "3.3 for with dictionaries\nYou will invariably need to loop through dictionaries in your programming career. Here is how you can do it with a for loop.\n\nsuperhero_info={\"Natasha Romanoff\": \"Black Widow\",\n                \"Tony Stark\": \"Iron Man\",\n                \"Stephen Strange\": \"Doctor Strange\"}\n\nfor key, value in superhero_info.items():\n    print(f\"{key} is Marvel's {value}!\")\n\nNatasha Romanoff is Marvel's Black Widow!\nTony Stark is Marvel's Iron Man!\nStephen Strange is Marvel's Doctor Strange!\n\n\nThe ‘hidden’ function items() spits out both the key and the corresponding value.\nIf you like, you can directly access the keys as follows:\n\nfor key in superhero_info.keys():\n    value=superhero_info[key]\n    print(f\"{key} is Marvel's {value}!\")\n\nNatasha Romanoff is Marvel's Black Widow!\nTony Stark is Marvel's Iron Man!\nStephen Strange is Marvel's Doctor Strange!\n\n\nBy the way, I have used the variable names key and value to highlight their roles in the dictionary. You can use whatever you like. In fact, using real_name and super_name is preferred.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/2_loops_good.html#footnotes",
    "href": "docs/python-basics/04_loops/2_loops_good.html#footnotes",
    "title": "Loops (Good)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nor the end of the Universe↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/1_loops_need_exercises.html",
    "href": "docs/python-basics/04_loops/1_loops_need_exercises.html",
    "title": "Loops (Need) Exercises",
    "section": "",
    "text": "Exercise 1 (Celcius to Farenheit) ☻\nYou are provided with the following list of temperatures in Celsius. Write a quick Python snippet that converts each temperature to Fahrenheit and prints both temperatures as a Celsius, Fahrenheit pair.\ntemperatures_celsius = [\n    0, 5, 10, 15, 20, 25,\n    30, 35, 40, 45, 50\n]\n\n\n\nExercise 2 (Multiplication table) ☻\n\nExampleTask\n\n\nYou can put a loop within a loop to do doubly loopy stuff. Here is an example:\n\nfor letter in ['A', 'B', 'C']:\n    for number in [1, 2, 3]:\n        print(f'{letter}{number}', end='\\t')\n    print('\\n')\n\nA1  A2  A3  \n\nB1  B2  B3  \n\nC1  C2  C3  \n\n\nTry this out and explore.\n\n\nWrite a Python snippet that prints a multiplication table (up to 5) for numbers 1 through 5 using nested for loops. The output should be formatted as shown below:\n\n\n1 : 1   2   3   4   5   \n2 : 2   4   6   8   10  \n3 : 3   6   9   12  15  \n4 : 4   8   12  16  20  \n5 : 5   10  15  20  25  \n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/3_loops_nice.html",
    "href": "docs/python-basics/04_loops/3_loops_nice.html",
    "title": "Loops (Nice)",
    "section": "",
    "text": "Warning\n\n\n\nThe material in this ‘Nice’ chapter is optional. The discussion typically deals with content beyond what a novice should know. So, please finish all the ‘Need’ and ‘Good’ portions before you go through this chapter.\n\n\n\n1 There is more to list comprehension\n\n\n\n\n\n\n\n\n\nYou can have more than one loop in a list comprehension.\n\n\n[[a,b] for a in range(5) for b in ['A', 'B', 'C']]\n\n\n[[0, 'A']\n [0, 'B']\n [0, 'C']\n [1, 'A']\n [1, 'B']\n [1, 'C']\n [2, 'A']\n [2, 'B']\n [2, 'C']\n [3, 'A']\n [3, 'B']\n [3, 'C']\n [4, 'A']\n [4, 'B']\n [4, 'C']]\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou can even incorporate a condition!\n\n\n[[a,b] for a in range(5) for b in ['A', 'B', 'C'] if a % 2 != 0]\n\n\n[[1, 'A']\n [1, 'B']\n [1, 'C']\n [3, 'A']\n [3, 'B']\n [3, 'C']]\n\n\n\n\n\n\n\nnested_list=[[1, 2, 3], [4, 5, 6, 7]]\n[y for x in nested_list for y in x]\nnested_list=[[1, 2, 3], [4, 5, 6, 7]]\n\noutput =[]\nfor x in nested_list:\n    for y in x:\n        output.append(y)\n\n\n\nHere is a slightly more complicated use of list comprehension to flatten a list.\n\n\n\n\n[1, 2, 3, 4, 5, 6, 7]\n\n\nThis does the same as:\n\n\n\n\n\n\n\n\n2 Zipping a dictionary\nzip() offers one of the easiest ways to combine two lists into a dictionary:\n\nsuper_names=[\"Black Widow\", \"Iron Man\", \"Doctor Strange\"]\nreal_names=[\"Natasha Romanoff\", \"Tony Stark\", \"Stephen Strange\"]\n\ndict(zip(real_names, super_names))\n\n{'Natasha Romanoff': 'Black Widow', 'Tony Stark': 'Iron Man', 'Stephen Strange': 'Doctor Strange'}\n\n\nIn the above dict() is used to recast zip()’s output into a dictionary.\n\n\n3 for and while has an else\nnumbers=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nfor i in numbers:\n    if i &lt; 0: break\nelse:\n    print('No negative numbers in the list')\n\n\n\nThe for and while loops in Python come with an optional else statement! The code in the else block is executed only if the loops are completed. The else code-block will not run if you exit the loop prematurely (e.g. by using break).\nShown alongside is a trivial example. You should add a negative number to the list, and re-run the snippet. There will be no message this time.\nSo, the else statement can be used to distinguish between the loops completing as planned or if there was a break (or return or an exception).\n\n\n\n\nNo negative numbers in the list\n\n\n\n\n\n\n\nExercises\n\nExercise 1 (Changing a list)  \n\nProblemA solution\n\n\nWe want a snippet of code based on a for loop to remove fruits starting with the letter ‘p’ from the following list.\nfruits = [\"apple\", \"banana\", \"jackfruit\",\n          \"pineapple\", \"papaya\", \"watermelons\",\n          \"peaches\", \"durian\",  \"mangoes\",\n          \"strawberries\", \"passionfruit\"\n          ]\nThe following has been suggested as a solution. However, it does not work!\nfor fruit in fruits:\n    if fruit[0] == \"p\":\n        fruits.remove(fruit)\nIdentify, understand and fix the error.\n\n\nfor fruit in fruits:\n    if fruit[0] == \"p\":\n        fruits.remove(fruit)\nAlthough the above code is elegant it has a serious flaw which you can see by using pythontutor.com to visualise the flow of the script.\nA safer solution is the following:\n\nfruits = [\"apple\", \"banana\", \"jackfruit\",\n          \"pineapple\", \"papaya\", \"watermelons\",\n          \"peaches\", \"durian\",  \"mangoes\",\n          \"strawberries\", \"passionfruit\"\n          ]\n\ncopy_of_fruits = fruits.copy()\n\n# Not that we are looping(iterating) over the copy\nfor fruit in copy_of_fruits:\n    if fruit[0] == \"p\":\n        fruits.remove(fruit)\nAn even better, clean and elegant solutions is:\nfruits = [\"apple\", \"banana\", \"jackfruit\",\n          \"pineapple\", \"papaya\", \"watermelons\",\n          \"peaches\", \"durian\",  \"mangoes\",\n          \"strawberries\", \"passionfruit\"\n          ]\n\n[fruit for fruit in fruits if fruit[0] != \"p\"]\n\n\n\n\n\n\n\n\nExercise 2 (A list of powers)  \n\nProblemA Solution\n\n\nThe following code is an attempt to create a list \\([n, n^2,n^3]\\) for several values of \\(n\\). We can specify the maximum value of \\(n\\) by changing maximum_n.\nmaximum_n = 5\nresult = [[]] * maximum_n\n\nfor n in range(1, maximum_n + 1):\n    result[n - 1].append(n)\n    result[n - 1].append(n**2)\n    result[n - 1].append(n**3)\nFor maximum_n = 5 the content of result should be as shown below.\n[[1, 1, 1],\n [2, 4, 8],\n [3, 9, 27],\n [4, 16, 64],\n [5, 25, 125]]\nHowever, the code does not produce this expected result!Identify, understand, explain and fix the bug.\n\n\n\nAn explantion\nThe problem arises because [[]] * 5 creates 5 references to the same empty list []. Running a list comprehension will create 5 different empty lists [].\nLet’s check if what I have said is true.\nmaximum_n = 5\n\nresult = [[]] * maximum_n\n\nfor count, element in enumerate(result):\n    print(count, id(element))\nmaximum_n = 5\n\nresult = [[] for _ in range(maximum_n)]\n\nfor count, element in enumerate(result):\n    print(count, id(element))\n\n\n\n\n0 123402501485888\n1 123402501485888\n2 123402501485888\n3 123402501485888\n4 123402501485888\n\n\n\n\n0 123402501567168\n1 123402501567616\n2 123402501569920\n3 123402501568064\n4 123402501567808\n\n\n\n\n\n\nA solution\n\nmaximum_n = 5\n# result = [[]] * maximum_n\nresult = [[] for _ in range(maximum_n)]\n\nfor n in range(1, maximum_n + 1):\n    result[n - 1].append(n)\n    result[n - 1].append(n**2)\n    result[n - 1].append(n**3)\n\n\n\n[[1, 1, 1]\n [2, 4, 8]\n [3, 9, 27]\n [4, 16, 64]\n [5, 25, 125]]\n\n\n\n\n\n\n\n\nExercise 3 (Time profiling)  \n\nProblem\n\n\nUse %%timeit to compare the execution speeds of the following:\n\n\n\n\n\n\n\n\n\n\n#\nOption 1\nOption 2\nResult\n\n\n\n\n1\nCreating a list of squares with for loop\nCreating a list of squares with while loop\n\n\n\n2\nCreating a list of squares with a for loop.\nCreating a list of squares with a list comprehension loop.\n\n\n\n3\nCreating a list of squares using list append()\nCreating a list of squares using list +=\n\n\n\n4\nCreating a list of squares using list append()\nCreating a list of squares using append()of Numpy\n\n\n\n5\nCreating a list of squares using Numpy\nCreating a list of squares using List comprehension loop.\n\n\n\n\n\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#keyboard-shortcuts",
    "href": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#keyboard-shortcuts",
    "title": "Using Jupyter (Good)",
    "section": "1.1 Keyboard Shortcuts",
    "text": "1.1 Keyboard Shortcuts\nUsing keyboard shortcuts will make your workflow smooth and efficient. Here are some essential shortcuts. It will help you to practice using all these keyboard shortcuts.\n\n\n\n\n\n\n\n\nAction\nShortcut\n\n\n\n\nRun cell\nCTRL + ENTER or CMD + ENTER\n\n\nRun cell and move to the next\nSHIFT + ENTER\n\n\nConvert cell to code cell\nESC + Y\n\n\nConvert cell to Markdown cell\nESC + M\n\n\nCreate new cell\nESC + A (above)ESC + B (below)\n\n\nCopy cell(s)\nESC + C\n\n\nPaste cell(s)\nESC + V\n\n\nMerge cells\nSHIFT + M\n\n\nDelete cell\nESC + D + D\n\n\nShow shortcuts\nESC + H\n\n\n\n\nYou will notice that many shortcut commands use the escape button (ESC). This is because typing ESC puts Jupyter into command mode, ready for a command, not code or text.\n\nThings to note\n\nYou can select one or more cells using SHIFT and the up and down arrow keys.\nBe careful with the delete shortcut; it can be ruthless.\nYou can view (and set) shortcuts for Jupyter Notebooks by typing ESC + H.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#shell-commands",
    "href": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#shell-commands",
    "title": "Using Jupyter (Good)",
    "section": "1.2 Shell commands",
    "text": "1.2 Shell commands\nYou can run ‘terminal’ commands (called shell commands) from Jupyter without switching to the terminal. The only thing you need to do is to add a ! in front of the command.\nTo test out this feature, run the following:\n\nWindows macOS \n\n\n\nThis will print the current working directory.\n!cd\nThis will show you a list of all the files in your folder.\n!dir\n\n\n\n\nThis will print the current working directory.\n!pwd\nThis will show you a list of all the files in your folder.\n!ls\n\n\n\n\n\n\n\n\n\n\nSkip ‘Jupyter Extensions’\n\n\n\nJupyter Notebooks are transitioning to Notebook version 7. As a consequence, it seems that Jupyter Extensions no longer work properly. Therefore, I have decided to skip the following step (Jupyter Extensions) in your setup.\nNote that this will only cause minor differences in your coding experience.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#installing-the-extensions",
    "href": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#installing-the-extensions",
    "title": "Using Jupyter (Good)",
    "section": "Installing the extensions",
    "text": "Installing the extensions\nYou can add several useful features (e.g., code formatting, TOC, equation numbers) to your Jupyter notebooks by installing jupyter_contrib_nbextensions (documentation).\nYou can do this in the terminal by invoking the following.\nconda install -c conda-forge jupyter_contrib_nbextensions\njupyter contrib nbextension install --user\nOnce you have finished installing, log out and restart Jupyter. You will then see a new tab, as shown in the image below.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#enabling-the-extensions",
    "href": "docs/python-basics/01_using_jupyter/2_using-jupyter_good.html#enabling-the-extensions",
    "title": "Using Jupyter (Good)",
    "section": "Enabling the extensions",
    "text": "Enabling the extensions\nYou will also see details of what each extension does by clicking on the name in the list. Finally, you can enable them simply by checking the box on the list. Here are some of the extensions I recommend.\n\nEquation Auto Numbering\nTable of Contents (2)\nVariable Inspector\nCode folding\nAutopep8 You must install the package autopep8 using conda for this to work.\n\nDiscover what features these have added by creating a new Jupyter Notebook. You will see several new buttons in the toolbar corresponding to some extensions. For instance, if you run x=10 in a code cell the Variable Inspector will show the details of the variable.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/2_using-jupyter_good_exercises.html#footnotes",
    "href": "docs/python-basics/01_using_jupyter/2_using-jupyter_good_exercises.html#footnotes",
    "title": "Using Jupyter (Good), Exercises",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOkay, okay it was me, but you pressed the button.↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercises (Simple)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#it-is-all-about-running-cells",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#it-is-all-about-running-cells",
    "title": "Using Jupyter (Need)",
    "section": "2.1 It is all about running cells",
    "text": "2.1 It is all about running cells\nThe basic unit of a Jupyter Notebook is a cell. A cell can either accept Python code or text in a format called Markdown.\nA cell ready to accept Python is called a code cell, while one ready for Markdown is called a Markdown cell. To ‘get things done’, we Run a cell by using the Run button or the keyboard shortcut CTRL + ENTER (or CMD + ENTER).\n\n\n\n\n\nRunning a code cell invokes Python while running a Markdown cell renders (i.e., makes it look pretty) your Markdown text. You will see how all this works in a bit, so don’t worry if things sound a tad cryptic at the moment.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#a-traditional-start",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#a-traditional-start",
    "title": "Using Jupyter (Need)",
    "section": "2.2 A traditional start",
    "text": "2.2 A traditional start\nLet’s follow a programming tradition and use Jupyter to print Hello World!.\n\nSelect a cell and convert it into a code cell.Actually, all new cells are, by default, code cells.\n\n\n\n\n\nThen type the following and run the command (i.e., pass the instruction to Python) by pressing the run button or using the keyboard shortcut CTRL + ENTER (or CMD + ENTER).\nprint('Hello World!')\nSurprise, surprise! You should see the words Hello World! as the output.\n\n\nHello world!\n\n\nYou will also see that the number before your code cell changes. This number is used to keep track of the history of the commands you have issued. It helps keep track of which input corresponds to which output.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#rendering-markdown-cells",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#rendering-markdown-cells",
    "title": "Using Jupyter (Need)",
    "section": "3.1 Rendering Markdown cells",
    "text": "3.1 Rendering Markdown cells\nTo render your text:\n\nSelect a cell and convert it to a Markdown cell (If you like, you can use the keyboard shortcut ESC + M),\nInput your text and\nRun.\n\nTo start, copy and paste the following (from the Guide1) and run the cell.\nThe ships hung in the sky in much the same way that bricks don’t.\nYou should see the text rendered.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#some-basic-syntax",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#some-basic-syntax",
    "title": "Using Jupyter (Need)",
    "section": "3.2 Some basic syntax",
    "text": "3.2 Some basic syntax\nThe table shows some basic Markdown syntax to modify how some text is rendered.\n\n\n\n\nStyle\nSyntax\n\n\n\n\nBold\n** ** or __ __\n\n\nItalic\n* * or _ _\n\n\nAll bold and italic\n*** ***\n\n\nSubscript\n&lt;sub&gt; &lt;/sub&gt;\n\n\nSuperscript\n&lt;sup&gt; &lt;/sup&gt;\n\n\n\n\nLet’s use it to modify our previous text as follows. (By the way, no more copying and pasting!)\nThe ships *hung in the sky* in much the same way that **bricks don’t.**&lt;sup&gt;1&lt;/sup&gt;&lt;sub&gt;QUOTE&lt;/sub&gt;\nThis will be rendered as:\nThe ships hung in the sky in much the same way that bricks don’t.1QUOTE",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#headings",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#headings",
    "title": "Using Jupyter (Need)",
    "section": "3.3 Headings",
    "text": "3.3 Headings\nMarkdown uses # for headings as follows.\n# The largest heading\n\n## The second-largest heading\n\n### The third-largest heading\n\n#### The smallest heading",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#displaying-code",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#displaying-code",
    "title": "Using Jupyter (Need)",
    "section": "3.4 Displaying Code",
    "text": "3.4 Displaying Code\nIf you want to mention code inline, you can enclose it between two backticks (`), like `print('Hello World')`. This will be rendered as print('Hello World!').\nYou can also have a block of code by using the following syntax.\n```python\nprint('Hello World!')\n```\nThis will be rendered as:\nprint('Hello World!')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#links",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#links",
    "title": "Using Jupyter (Need)",
    "section": "3.5 Links",
    "text": "3.5 Links\nCreating links with Markdown is trivial. You just enclose the display text in [ ] followed by the link-address in ( ) like\n[SP2273 Website](https://sps.nus.edu.sg/sp2273)\nThis will be rendered as SP2273 Website. Things won’t work if you don’t include the https:// part. So, be careful.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#images",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#images",
    "title": "Using Jupyter (Need)",
    "section": "3.6 Images",
    "text": "3.6 Images\nMarkdown also lets you easily include images from your computer or the web. The syntax is similar to links, except there is a ! in front.\nLet me show you by inserting the NUS logo from the University’s front page (You can get the link to any image by right-clicking and copying the image address).\nThe syntax is:\n![](https://nus.edu.sg/images/default-source/base/logo.png)\nThis will give you:\n\nYou can also similarly include images on your computer. Just put the filename instead of the address. Again, you need to give enough information (full or relative path, see chapter os) for Jupyter to be able to find the file.\n\n\n\n\n\n\nA fly in the ointment\n\n\n\nSometimes, you might have to copy the image file to the folder/directory containing the .ipynb to successfully include local images.\nI think this happens mainly for Windows users. I am sorry2.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#tables",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#tables",
    "title": "Using Jupyter (Need)",
    "section": "3.7 Tables",
    "text": "3.7 Tables\nMarkdown following syntax to create tables:\n| A    |  B   |    C |\n| :--- | :--: | ---: |\n| a1   |  b1  |   c1 |\n| a2   |  b2  |   c2 |\n| a3   |  b3  |   c3 |\nWhich will be rendered as:\n\n\n\n\nA\nB\nC\n\n\n\n\na1\nb1\nc1\n\n\na2\nb2\nc2\n\n\na3\nb3\nc3\n\n\n\n\nIn my experience, tables are the most annoying things to create and format in a document3. So I find it easier to organise the information in Excel or Sheets and then use a web tool like Table Generator to create the tables.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#lists",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#lists",
    "title": "Using Jupyter (Need)",
    "section": "3.8 Lists",
    "text": "3.8 Lists\nYou can have numbered or unnumbered lists in Markdown. Below are a few examples. I have shown the code first and then what it will look like when rendered.\n\nNumberedUnnumberedNumbered-numberedNumbered-unnumbered\n\n\n\n\n\n\n\n\n1. Master Yoda\n1. Luke Skywalker\n1. Anakin Skywalker\n\n\n\nMaster Yoda\nLuke Skywalker\nAnakin Skywalker\n\n\n\n\n\n\n\n\n\n\n\n\n- Master Yoda\n- Luke Skywalker\n- Anakin Skywalker\n\n\n\nMaster Yoda\nLuke Skywalker\nAnakin Skywalker\n\n\n\n\n\n\n\n\n\n\n\n\n1. Master Yoda\n   1. Was a Jedi\n   1. Was a bit green\n1. Luke Skywalker\n   1. Was a Jedi\n   1. Is Anakin's son.\n1. Anakin Skywalker\n   1. Was a Jedi then became a baddie\n   1. Is famous for saying 'Luke, I am your father'\n\n\n\nMaster Yoda\n\nWas a Jedi\nWas a bit green\n\nLuke Skywalker\n\nWas a Jedi\nIs Anakin’s son.\n\nAnakin Skywalker\n\nWas a Jedi then became a baddie\nIs famous for saying ‘Luke, I am your father’\n\n\n\n\n\n\n\n\n\n\n\n\n\n1. Master Yoda\n   - Was a Jedi\n   - Was a bit green\n1. Luke Skywalker\n   - Was a Jedi\n   - Is Anakin's son.\n1. Anakin Skywalker\n   - Was a Jedi then, became a baddie\n   - Is famous for saying, _'Luke, I am your father'_.\n\n\n\nMaster Yoda\n\nWas a Jedi\nWas a bit green\n\nLuke Skywalker\n\nWas a Jedi\nIs Anakin’s son.\n\nAnakin Skywalker\n\nWas a Jedi then, became a baddie\nIs famous for saying, ‘Luke, I am your father’.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#equations",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#equations",
    "title": "Using Jupyter (Need)",
    "section": "3.9 Equations",
    "text": "3.9 Equations\nMarkdown can produce phenomenal math equations4.\n\nIf you want to have inline math use two $ signs like $\\sqrt{b^2-4ac}$, which will be rendered as \\(\\sqrt{b^2-4ac}\\).\nIf you want a math block, you can use the following:\n$$\nx = \\dfrac{-b \\pm \\sqrt{b^2-4ac}}{2a}\n$$\nWhich will be rendered as:\n\n\\[\nx = \\dfrac{-b \\pm \\sqrt{b^2-4ac}}{2a}\n\\]\nHere are some helpful math commands that you can use. For more details, refer to the mathematical documentation at Overleaf.\n\n\n\n\n\n\n\n\n\n\nInput\nRendered\n\n\n\n\nFraction\n$\\dfrac{y}{x}$\n\\(\\dfrac{y}{x}\\)\n\n\nSubscript\n$x_{a}$\n\\(x_{a}\\)\n\n\nPower\n$x^{(y+z)}$\n\\(x^{(y+z)}\\)\n\n\nSquareroot\n$\\sqrt{a+b+c}$\n\\(\\sqrt{a+b+c}\\)\n\n\nSum\n$\\sum_{n=1}^{n=\\infty} x_n$\n\\(\\sum_{n=1}^{n=\\infty} x_n\\)\n\n\nIntegral\n$\\int_{x=1}^{x=\\infty} f(x)dx$\n\\(\\int_{x=1}^{x=\\infty} f(x)dx\\)\n\n\nNot equal\na \\ne b\n\\(a \\ne b\\)\n\n\nLess than\n$a \\lt b$\n\\(a \\lt b\\)\n\n\nLess than or equal to\n$a \\leq b$\n\\(a \\leq b\\)\n\n\nGreater than\n$a \\gt b$\n\\(a \\gt b\\)\n\n\nGreater than or equal to\n$a \\geq b$\n\\(a \\geq b\\)\n\n\nGreek letters\n$\\alpha, \\beta, \\gamma, \\pi, \\lambda$\n\\(\\alpha, \\beta, \\gamma, \\pi, \\lambda\\)",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#footnotes",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need.html#footnotes",
    "title": "Using Jupyter (Need)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou and I will have problems if you do not know about The Hitchhiker’s Guide to the Galaxy.↩︎\nthat you are using Windows.↩︎\nespecially with doubly annoying software like Word↩︎\nUsing a \\(\\LaTeX\\) engine called MathJax↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "Using Jupyter (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/01_using_jupyter/1_using-jupyter_need_exercises.html#quadratic-equations",
    "href": "docs/python-basics/01_using_jupyter/1_using-jupyter_need_exercises.html#quadratic-equations",
    "title": "Using Jupyter (Need), Exercises",
    "section": "1 Quadratic Equations",
    "text": "1 Quadratic Equations\n\nIntroduction\n\n(Image from the Wikipedia page on Quadratic equations)\nThe general form of a quadratic equation is:\n\\[\nax^2 + bx + c = 0\n\\]\n\n\nSolutions\nProvided \\(a\\ne0\\), we can use an elementary algebraic method called completing the square to show that a quadratic equation has the following solution: \\[\nx = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\n\\]\n\n\nDiscriminant\nThe quantity \\(\\Delta = b^2-4ac\\) is called the discriminant of the equation and decides the nature of its solutions. The table below shows the various possibilities.\n\n\n\nDiscriminant\nRoots\n\n\n\n\n\\(\\Delta = b^2-4ac = 0\\)\nA single solution of \\(-b/(2a)\\)\n\n\n\\(\\Delta = b^2-4ac \\gt 0\\)\nTwo distinct solutions\n\n\n\\(\\Delta = b^2-4ac \\lt 0\\)\nNo real solutions; both are complex.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "1. Using Jupyter",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercises (Simple)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/2_loops_good_exercises.html",
    "href": "docs/python-basics/04_loops/2_loops_good_exercises.html",
    "title": "Loops (Good) Exercises",
    "section": "",
    "text": "Exercise 1 (Make me an odd list) ☻\nWith your knowledge of growing lists, use a for loop with range() and continue to generate a list of the squares of the odd integers from 0 to 9.\nHint: You can check for ‘evenness’ using number % 2 == 0.\n\n\nExercise 2 (Make me another odd list) ☻\nRedo the previous exercise using list comprehension.\n\n\nExercise 3 (Time me!) ☻\nUse the cell magic command %%timeit to time the previous solutions. Which of the two is faster?\n\n\nExercise 4 (A problem of decay) ☻\nThe initial quantity of a sample of a radioactive substance is 100 units, and it decays by 5% each year. Use a while loop to determine how long the sample will take to reduce to half its original amount.\n\n\nExercise 5 (Changes in CO\\(_2\\)) ☻\nThe following is data about atmospheric CO\\(_2\\) levels for several years in a (year, CO2_level) format. The units are ppm.\nco2_data = [\n    (2000, 369.55), (2001, 371.14), (2002, 373.28), \n    (2003, 375.80), (2004, 377.52), (2005, 379.80), \n    (2006, 381.90), (2007, 383.79), (2008, 385.60), \n    (2009, 387.43), (2010, 389.90), (2011, 391.65), \n    (2012, 393.85), (2013, 396.52), (2014, 398.65),\n    (2015, 400.83), (2016, 404.24), (2017, 406.55), \n    (2018, 408.52), (2019, 411.44), (2020, 414.24)\n]\nIdentify those years that showed an increase of CO\\(_2\\) of 3 ppm or more compared to the previous year.\nPlease print out these years along with the corresponding change in concentration.\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/1_loops_need.html#for-with-a-list",
    "href": "docs/python-basics/04_loops/1_loops_need.html#for-with-a-list",
    "title": "Loops (Need)",
    "section": "1.1 for with a list",
    "text": "1.1 for with a list\nI can achieve the same result using a for loop as follows:\n\nfor name in real_names:\n    print(f\"{name} is a Marvel superhero!\")\n\nNatasha Romanoff is a Marvel superhero!\nTony Stark is a Marvel superhero!\nStephen Strange is a Marvel superhero!\n\n\nNotice the structure of the for loop;\n\nit goes through the list and assigns name the value of each element of the list.\nit then runs the code-block using this value of name.\nthe code block is deginted by using : and tabs like with if.\n\n\n\n\n\n\n\nRemember\n\n\n\nRemember that for can be used to directly loop through a list.\n\n\nBy the way, there is nothing special about the names of the variables I have used. The following will work too. However, it will not be very readable because x is a bit cryptic in this context.\nfor x in real_names:\n    print(f\"{x} is a Marvel superhero!\")",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/1_loops_need.html#for-with-enumerate",
    "href": "docs/python-basics/04_loops/1_loops_need.html#for-with-enumerate",
    "title": "Loops (Need)",
    "section": "1.2 for with enumerate",
    "text": "1.2 for with enumerate\nLet’s say we want to do a bit more, like using the information in both of the following lists.\n\nsuper_names = [\"Black Widow\", \"Iron Man\", \"Doctor Strange\"]\nreal_names = [\"Natasha Romanoff\", \"Tony Stark\", \"Stephen Strange\"]\n\nSince the for loop only accepts one list, we need to do something else to access the data in both lists. One option is to use enumerate(). Let me first show you how enumerate() works.\n\nfor count, name in enumerate(real_names):\n    print(f'{count}: {name} is a Marvel superhero!')\n\n0: Natasha Romanoff is a Marvel superhero!\n1: Tony Stark is a Marvel superhero!\n2: Stephen Strange is a Marvel superhero!\n\n\nYou can think of enumerate() as something that keeps count. In the above example, enumerate() not only gives the elements of the list, it also gives you a number (that is stored in count).\nOther than counting, we can use the count given by enumerate() to index the other list!\n\nfor index, name in enumerate(real_names):\n    superhero_name = super_names[index]\n    print(f'{name} is {superhero_name}!')\n\nNatasha Romanoff is Black Widow!\nTony Stark is Iron Man!\nStephen Strange is Doctor Strange!\n\n\nBefore we move on, I would like to highlight two things:\n\nNotice how I changed the variable name used with enumerate() to (count and index) to match their logical use. This makes it easy to iimediately see what you are doing (i.e., the intention) wiht the code. Python does not really care abot this, but remember that we write programmes for humans!\nAlthough by default, enumerate() starts counting from 0, we can easily change it to start at another value, say 100.\n\nfor count, name in enumerate(real_names, 100):\n    print(f'{count}: {name} is a Marvel superhero!')\n\n100: Natasha Romanoff is a Marvel superhero!\n101: Tony Stark is a Marvel superhero!\n102: Stephen Strange is a Marvel superhero!\n\n\n\n\n\n\n\n\n\nRemember\n\n\n\nRemember that for can be combined with enumerate() to count while looping through a list.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/04_loops/1_loops_need.html#for-with-range",
    "href": "docs/python-basics/04_loops/1_loops_need.html#for-with-range",
    "title": "Loops (Need)",
    "section": "1.3 for with range",
    "text": "1.3 for with range\nYet, another way to achieve the result above is by using the function range(). But, first lets see what range() can do.\n\n\n\nfor i in range(5):\n    print(i)\n\n\n\nWe can use range() to get the for loop to run a given number of loops (5 in this example).\n\n\n\n0\n1\n2\n3\n4\n\n\n\n\n\n\nfor i in range(5, 10):\n    print(i)\n\n\n\nWe can tailor the starting and ending values…\n\n\n\n5\n6\n7\n8\n9\n\n\n\n\n\n\nfor i in range(1, 10, 3):\n    print(i)\n\n\n\nWe can even adjust the step size.\n\n\n\n1\n4\n7\n\n\n\n\n\n\n\nNote:\n\nFunctions like range() and enumerate() only work with looping structures.\nrange() always ends one short of the ending number.\n\nNow, let’s return to our initial problem of printing superhero names. We can use range() as follows:\n\nfor i in range(len(real_names)):\n    real_name = real_names[i]\n    super_name = super_names[i]        \n    print(f\"{real_name} is Marvel's {super_name}!\")\n\nNatasha Romanoff is Marvel's Black Widow!\nTony Stark is Marvel's Iron Man!\nStephen Strange is Marvel's Doctor Strange!\n\n\nNotice that I have used the len(real_names) to get how many times the loop should run.\n\n\n\n\n\n\nRemember\n\n\n\nRemember that for can be run a given number of times using range().",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "4. Loops",
      "Loops (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/2_basics_good.html#asking-math-questions",
    "href": "docs/python-basics/02_basics/2_basics_good.html#asking-math-questions",
    "title": "Fundamentals (Good)",
    "section": "2.1 Asking Math questions",
    "text": "2.1 Asking Math questions\n\nYou will find the following useful when asking mathematical questions:\n\n\n\n\n\n\n\n\n\nQuestion/Condition\nMath Symbol\nPython Symbols\n\n\n\n\nEquals?\n=\n==\n\n\nNot equal?\n≠\n!=\n\n\nLess than?\n&lt;\n&lt;\n\n\nGreater than?\n&gt;\n&gt;\n\n\nLess than or equal?\n≤\n&lt;=\n\n\nGreater than or equal?\n≥\n&gt;=\n\n\n\n\n\n\n\n\n\nPython also (thankfully) accepts all the following syntax:\n\n\n\n\n\n\nx &gt; 5 and x &lt; 15\n\n\n(x &gt; 5) and (x &lt; 15)\n\n\n5 &lt; x &lt; 15\n\n\n\nClearly, the last format is the neatest and easiest to read. Notice also how the brackets increase the readability of the statement.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/2_basics_good.html#the-problem",
    "href": "docs/python-basics/02_basics/2_basics_good.html#the-problem",
    "title": "Fundamentals (Good)",
    "section": "4.1 The Problem",
    "text": "4.1 The Problem\nwhen often need to compare numbers, especially for scientific work. Unfortunately, since computers have finite (hardware) resources, floating point numbers cannot be exactly stored in a computer3. This leads to errors called roundoff errors. Let me demonstrate:\nTry the following code which compares \\(0.1\\times 3\\) with \\(0.3\\).\n\na = 0.1\na3 = 0.3\na * 3 == a3\n\nFalse\n\n\nTo convince you further, let’s try printing \\(0.3\\) to 17 decimal places:\n\nf'{0.3:.17f}'\n\n'0.29999999999999999'",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/2_basics_good.html#a-solution",
    "href": "docs/python-basics/02_basics/2_basics_good.html#a-solution",
    "title": "Fundamentals (Good)",
    "section": "4.2 A solution",
    "text": "4.2 A solution\nTo get around these types of issues, you should check if the variable is close to the expected values instead of checking for equality.\n\neps = 1E-10\nabs(a * 3 - a3) &lt; eps\n\nTrue\n\n\nOr just use Numpy\n\nnp.isclose(a * 3, a3)\n\nTrue",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/2_basics_good.html#structure-of-f-strings",
    "href": "docs/python-basics/02_basics/2_basics_good.html#structure-of-f-strings",
    "title": "Fundamentals (Good)",
    "section": "5.1 Structure of f-strings",
    "text": "5.1 Structure of f-strings\nf-string formatting has the structure {X:&gt;0Y.ZW}. Here is more information about the letters X,Y,&gt;, 0,Z and W.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLetter\nAction\nPossible Options\n\n\n\n\nX\nVariable to format\nCan be a number or a string\n\n\n&gt;\nAlignment\n\n&lt; (Left justified)\n&gt; (Right justified)\n^ (Centre justified)\n\n\n\n0\nUse 0’s to pad the spaces\nYou can use other characters like a space .\n\n\nY\nTotal number of characters\n\n\n\nZ\nNumber of decimal places\n\n\n\nW\nSpecifies the type of variable.\n\nf (float)\nd (integer)\ns (string)\ng (Asks Python to figure out)\n\n\n\n\n\n\n\n\n\nYou can refer to this website for more information about f-strings.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/2_basics_good.html#self-documenting-f-strings",
    "href": "docs/python-basics/02_basics/2_basics_good.html#self-documenting-f-strings",
    "title": "Fundamentals (Good)",
    "section": "6.1 Self-documenting f-strings",
    "text": "6.1 Self-documenting f-strings\nf-strings offer a neat self-documenting option that prints the variable and the value all on its own. This is obviously very useful, especially during debugging. Here is how you use it:\n\nx, y= 42, 24\nprint(f'{x=} and {y=}')\n\nx=42 and y=24\n\n\nFormatting works too!\n\nx, y= 42/5, 24/5\nprint(f'{x=:.3f} and {y=:.6f}')\n\nx=8.400 and y=4.800000",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/2_basics_good.html#footnotes",
    "href": "docs/python-basics/02_basics/2_basics_good.html#footnotes",
    "title": "Fundamentals (Good)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ndespite the English phrase↩︎\nE.g. with an OCR table of numbers.↩︎\ndue to issues related to the precision of the IEEE 754 standard↩︎\ncalled augmented assignment↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/3_basics_nice.html#the-problem",
    "href": "docs/python-basics/02_basics/3_basics_nice.html#the-problem",
    "title": "Fundamentals (Nice)",
    "section": "6.1 The Problem",
    "text": "6.1 The Problem\nSince we use variables all the time, it is good to understand how they work. This is particularly true for Python because certain Python variables can be sneaky!\nWhat do you think will be printed if you run the following code? Try to predict the answers before running the code.\nx = [1, 2]\ny = x\ny.append(3)\n\nprint(f\"x: {x}, y: {y}\")",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/3_basics_nice.html#an-explanation",
    "href": "docs/python-basics/02_basics/3_basics_nice.html#an-explanation",
    "title": "Fundamentals (Nice)",
    "section": "6.2 An explanation",
    "text": "6.2 An explanation\nLet’s explore the root of this by first running the following code:\n\n'''CODE 1'''\n\n'CODE 1'\n\nx = 1\ny = 1\n\nprint(f\"x: {id(x)}, y: {id(y)}, 1: {id(1)}\")\n\nx: 137779956002504, y: 137779956002504, 1: 137779956002504\n\n\nThe above code tells us that x, y both have the same id as 1! The following figure tries to explain what is happening.\n\n\nBefore the code is run, Python has things or objects 1, 2 and a that have three properties type, value and id. For example, 1 can have the value 1, type int, and some id. a can have the value ‘a’, type str and some id.\nAfter the code is run, x and y are ‘looking at’ or bound to 1. So x and y are referred to as names that are bound to 11.\n\nNow run this code:\n\n'''CODE 2'''\n\n'CODE 2'\n\nx = 1\ny = x + 1\n\nprint(f\"x: {id(x)}, y: {id(y)}\")\n\nx: 137779956002504, y: 137779956002536\n\nprint(f\"1: {id(1)}, 2: {id(2)}\")\n\n1: 137779956002504, 2: 137779956002536\n\n\nSince the mathematical operation requires y to have the value 2, y now gets bound to object 2. This happens because the value of object 1 cannot be changed, so the binding is changed instead.\n\nObjects such as 1 whose values cannot be changed are called immutable. Other such immutable types are str(i.e., letters), float, bool.\nThere are also objects whose values can be changed. These types are called mutable and include lists and dictionaries and instances of classes. These behave differently, as highlighted in the problem above.\nHere is the code from the ‘problem’ with some explanations.\n# x is bound to a list object with a value [1 ,2]\nx = [1, 2]\n\n# y is bound to the SAME list object with a value [1 ,2]\ny = x\n\n# y is used to change the value of the object from  [1, 2] to [1, 2, 3]\ny.append(3)",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/3_basics_nice.html#a-solution",
    "href": "docs/python-basics/02_basics/3_basics_nice.html#a-solution",
    "title": "Fundamentals (Nice)",
    "section": "6.3 A solution",
    "text": "6.3 A solution\nIf you really want y to have an independent copy of x, you should use:\ny = x.copy()\n\n\n\n\n\n\nMutable vs. immutable types\n\n\n\n\n\nBe very careful when you use mutable data types as variables.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/3_basics_nice.html#footnotes",
    "href": "docs/python-basics/02_basics/3_basics_nice.html#footnotes",
    "title": "Fundamentals (Nice)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis is the basis of the, sometimes contentious, statement that there are no variables in Python↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Nice)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/1_basics_need.html#some-context",
    "href": "docs/python-basics/02_basics/1_basics_need.html#some-context",
    "title": "Fundamentals (Need)",
    "section": "10.1 Some Context",
    "text": "10.1 Some Context\nI now like to talk about an essential, super-powerful feature of Python. For this, I will use the example of doing mathematics using Python. Let’s say we want to calculate:\n\\[\n\\dfrac{1 \\times ((2-3) + 4)^{5}}{6}\n\\]\nWe can do this by:\n\n1 * ((2 - 3) + 4) ** 5 / 6\n\n40.5\n\n\nHow about \\(\\sqrt{4}\\)?\n\nsqrt(4)      # Will NOT work because \n             # basic Python is limited\n\nError in py_call_impl(callable, dots$args, dots$keywords): NameError: name 'sqrt' is not defined\n\n\nOh, dear! Python cannot calculate square roots! However, this is not a problem because we can imbue Python with newer functionality by using packages. For instance, I can give Python more math skills by using (importing) the math package.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/1_basics_need.html#importing-the-math-package",
    "href": "docs/python-basics/02_basics/1_basics_need.html#importing-the-math-package",
    "title": "Fundamentals (Need)",
    "section": "10.2 Importing the math package",
    "text": "10.2 Importing the math package\n\nimport math         # Adding(importing) the functions\n                    # of the 'math' package    \n\nNow we can use the sqrt() function of the math module.\n\nmath.sqrt(4)\n\n2.0",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/1_basics_need.html#importing-the-numpy-package",
    "href": "docs/python-basics/02_basics/1_basics_need.html#importing-the-numpy-package",
    "title": "Fundamentals (Need)",
    "section": "10.3 Importing the numpy package",
    "text": "10.3 Importing the numpy package\nmath is one of many modules that offer the sqrt() functionality. So let me also import the super useful Numpy package to use its sqrt() function.\n\nimport numpy as np    # Importing Numpy and giving \n                      # it an alias np \n                      # because I am lazy\n\nNow we can also use the sqrt() function of the Numpy module. Since I imported it with an alias (np) I can be lazy and use np instead of the longer numpy.\n\nnp.sqrt(4)\n\n2.0",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/1_basics_need.html#why-so-many-packages",
    "href": "docs/python-basics/02_basics/1_basics_need.html#why-so-many-packages",
    "title": "Fundamentals (Need)",
    "section": "10.4 Why so many packages?",
    "text": "10.4 Why so many packages?\nYou might wonder why we need multiple sqrt() functions. There are different versions because they have different capabilities and efficiencies. For example, the Numpy version can handle a list of numbers:\n\nnp.sqrt([4, 9, 16])\n\narray([2., 3., 4.])\n\n\nWe will talk a lot more about Numpy later. Before we move on, please note that you need to import packages only once(You do not have to teach Python the same thing twice!). Python will remember the functions until you restart the Python interpreter.\n\n\n\n\n\n\nRemember\n\n\n\n\nYou can give Python ‘superpowers’ by importing packages.\nYou must import a package only once.\nThere are different ways to import packages (e.g. with or without an ‘alias’).",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/02_basics/1_basics_need.html#footnotes",
    "href": "docs/python-basics/02_basics/1_basics_need.html#footnotes",
    "title": "Fundamentals (Need)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe latest version of the interpreter is 3.12.↩︎\nExcept the keywords used in the Python language like if, for, while, is ↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "2. Fundamentals",
      "Fundamentals (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/2_plotting_good.html#sharing-axes",
    "href": "docs/python-basics/07_plotting/2_plotting_good.html#sharing-axes",
    "title": "Plotting (Good)",
    "section": "5.1 Sharing axes",
    "text": "5.1 Sharing axes\nNotice I have asked Matplotlib to make the plots more compact by sharing the \\(x\\) and \\(y\\) axes using sharex and sharey.\nLet’s first see what happens if I do not specify how to share.\n\n\n\n\n\n\nfig, ax = plt.subplots(\n    nrows=2, ncols=2,\n    figsize=(5, 5)\n)\nYou see that Matplotlib has auto-scaled both axes. In particular, the plots on the left go from 0 to 4, and those on the right go from 0 to 5, as these are the lengths I used for the lines.\n\n\n\n\n\n\nNow, let me specify how to share the axes. I can do this in three ways:\n\n\n\n\nOption\nResult\n\n\n\n\nTrue\nMakes all the axes use the same range.\n\n\ncol\nUse the same range for all the columns\n\n\nrow\nUse the same range for all the rows\n\n\n\n\nLet’s try the following:\n\n\n\n\n\n\nfig, ax = plt.subplots(\n    nrows=2, ncols=2,\n    figsize=(5, 5),\n    sharex=True, sharey='row'\n)\nNotice how all the plots have the same range for the \\(x\\)-axis.\n\n\n\n\n\n\n\n\n\n\n\n\nHowever, sharex='col' is more suited for the data we are plotting, so let’s use that instead.\nfig, ax = plt.subplots(\n    nrows=2, ncols=2,\n    figsize=(5, 5),\n    sharex='col', sharey='row'\n)\nBy the way, how you decide on the most correct depends on what story you are trying to communicate with your plot.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/2_plotting_good.html#accessing-all-axes",
    "href": "docs/python-basics/07_plotting/2_plotting_good.html#accessing-all-axes",
    "title": "Plotting (Good)",
    "section": "5.2 Accessing all axes",
    "text": "5.2 Accessing all axes\nYou will often want to apply changes to all the axes, like in the case of the grid. You can do this by\ntop_left.grid(alpha=.25)\ntop_right.grid(alpha=.25)\nbottom_left.grid(alpha=.25)\nbottom_right.grid(alpha=.25)\nBut this is inefficient and requires a lot of work. It is much nicer to use a for loop.\nfor a in ax.flatten():\n    a.grid(alpha=.25)",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/2_plotting_good.html#histograms",
    "href": "docs/python-basics/07_plotting/2_plotting_good.html#histograms",
    "title": "Plotting (Good)",
    "section": "6.1 Histograms",
    "text": "6.1 Histograms\nA histogram is a valuable tool for showing distributions of data. For this example, I have extracted some actual data from sg.gov related to the mean monthly earnings of graduates from the various universities in Singapore.\n\nData\nHere are the links to my data files:\n\n\n\n\n\nMean basic monthly earnings by graduates\n\n\n\n\nAll\nsg-gov-graduate-employment-survey_basic_monthly_mean_all.csv\n\n\nNUS Only\nsg-gov-graduate-employment-survey_basic_monthly_mean_nus.csv\n\n\n\n\n\n\nA quick helper function\nI will need to read the data from these files several times. So, I will create a function called det_plot_data() that I can call. You must examine the file structure to understand the data and why I am skipping the first line.\n\nCodeData structure of the files\n\n\ndef get_plot_data():\n    data = {}\n    filename = 'sg-gov-graduate-employment-survey_basic_monthly_mean_all.csv'\n    data['All'] = np.loadtxt(filename, skiprows=1)\n\n    filename = 'sg-gov-graduate-employment-survey_basic_monthly_mean_nus.csv'\n    data['NUS'] = np.loadtxt(filename, skiprows=1)\n\n    return data\n\n\n\n\n\n\n\n\nsg-gov-graduate-employment-survey_basic_monthly_mean_all.csv\n\n\nbasic_monthly_mean\n3701\n2850\n3053\n3557\n3494\n2952\n3235\n3326\n3091\n\n\n\n\nsg-gov-graduate-employment-survey_basic_monthly_mean_nus.csv\n\n\nbasic_monthly_mean\n2741\n3057\n3098\n2960\n3404\n2740\n3065\n3350\n3933\n\n\n\n\n\n\n\n\n\n\nThe histogram\n\nFigureCode\n\n\n\n\n\n\nplt.style.use('bmh')\ndata = get_plot_data()\n\n# bins specifies how many bins to split the data\nplt.hist([data['All'], data['NUS']], bins=50, label=['All', 'NUS'])\nplt.xlabel('Mean of Basic Montly Earning (S$)')\nplt.ylabel('Number of Students')\nplt.legend()",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/2_plotting_good.html#scatter-plots",
    "href": "docs/python-basics/07_plotting/2_plotting_good.html#scatter-plots",
    "title": "Plotting (Good)",
    "section": "6.2 Scatter plots",
    "text": "6.2 Scatter plots\nScatter plots are created by putting a marker at an \\((x,y)\\) point you specify. They are simple yet powerful.\nI will be lazy and use the same data as the previous example. But, since I need some values for \\(x\\) I am going to use range() along with len() to generate a list [0,1,2...] appropriate to the dataset.\n\nFigureCode\n\n\n\n\n\n\nplt.style.use(\"seaborn-v0_8-darkgrid\")\n\ndata = get_plot_data()\n\nfor label, numbers in data.items():\n    x = range(len(numbers))\n    y = numbers\n    plt.scatter(x, y, label=label, alpha=.5)\n\nplt.xlabel('Position in the list')\nplt.ylabel('Mean of Basic Montly Eraning (S$)')\nplt.legend()",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/2_plotting_good.html#bar-charts",
    "href": "docs/python-basics/07_plotting/2_plotting_good.html#bar-charts",
    "title": "Plotting (Good)",
    "section": "6.3 Bar charts",
    "text": "6.3 Bar charts\nI am using some dummy data for a hypothetical class for this example. I extract the data and typecast to pass two lists to bar(). Use barh() if you want horizontal bars.\n\nFigureCode\n\n\n\n\n\n\nstudent_numbers = {'Life Sciences': 14,\n                   'Physics': 12,\n                   'Chemistry': 8,\n                   'Comp. Biology': 1}\nmajors = list(student_numbers.keys())\nnumbers = list(student_numbers.values())\n\nplt.style.use('ggplot')\nplt.bar(majors, numbers)\nplt.xlabel('Majors')\nplt.ylabel('Number of Students')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/2_plotting_good.html#pie-charts",
    "href": "docs/python-basics/07_plotting/2_plotting_good.html#pie-charts",
    "title": "Plotting (Good)",
    "section": "6.4 Pie charts",
    "text": "6.4 Pie charts\nI am not a big fan of pie charts, but they have their uses. Let me reuse the previous data from the dummy class.\n\nFigureCode\n\n\n\n\n\n\nstudent_numbers = {'Life Sciences': 14,\n                   'Physics': 12,\n                   'Chemistry': 8,\n                   'Comp. Biology': 1}\nmajors = list(student_numbers.keys())\nnumbers = list(student_numbers.values())\n\nplt.style.use('fivethirtyeight')\nplt.pie(numbers, \n        labels=majors,\n        autopct='%1.1f%%',   # How to format the percentages\n        startangle=-90                \n        )\nplt.title('Percentage of each major')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "Plotting (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/07_plotting/2_plotting_good_exercises.html",
    "href": "docs/python-basics/07_plotting/2_plotting_good_exercises.html",
    "title": "Plotting (Good) Exercises",
    "section": "",
    "text": "Exercise 1  \n\nPlotsTasksCode\n\n\nBefore\n\nAfter\n\n\n\nThe code shown in the Code tab generates the ‘Before’ figure shown in the Plots tab.\nYour task is to modify this code to end with the ‘After’ figure in jpg format.\nHere are some things to get you started:\n\nRemove the text ‘I am..’\nChange the colours used for filling.\nChange the limits of the filled areas.\nAdd titles to each subplot.\nShare the x axis across columns.\nAdd/Remove labels to the x-axis.\nMake the tick labels of the two bottom plots the same.\nAdd grids to all subplots.\nAdd a legend to all subplots in the upper right position.\nUse tight_layout() to improve the figure.\nSave the figure as a jpg file.\n\nYou might want to view the images in their full resolution by opening them in another tab.\n\n\n\n#--------- Generate cosine and sine values --------#\nx = np.linspace(-np.pi, np.pi, num=100, endpoint=True)\ncos_x = np.cos(x)\nsin_x = np.sin(x)\nfun1_x = np.exp(-x) * np.cos(5 * x)\nfun2_x = np.exp(-x) * np.sin(2 * x)\n\n#------- Plot the data -------#\nfig, axes = plt.subplots(nrows=2, ncols=2,\n                         figsize=(12, 8),  sharey='row')\n\n#------- Subplot 1 -------#\naxes[0, 0].plot(x, cos_x, color='r', label='$\\cos x$')\naxes[0, 0].plot(x, cos_x**2, color='r',\n                linestyle=':', label='$\\cos^2 x$')\naxes[0, 0].set_title('$\\cos x$ & $\\cos^2x$')\naxes[0, 0].set_ylabel('Cosine Value')\naxes[0, 0].fill_between(x, cos_x, -1, color='g', alpha=.125)\naxes[0, 0].set_xlabel('Angle (radians)')\naxes[0, 0].text(0, 0, 'I am [0, 0]!', fontsize=30,\n                horizontalalignment='center')\n\n#------- Subplot 2 -------#\naxes[0, 1].plot(x, sin_x, color='g', label='$\\sin x$')\naxes[0, 1].fill_between(x, cos_x, -2, color='r', alpha=.125)\naxes[0, 1].plot(x, sin_x**2, label='$\\sin^2 x$')\naxes[0, 1].set_ylabel('Cosine Value')\naxes[0, 1].set_ylim(-1.25, 1.25)\naxes[0, 1].legend(loc='lower right', frameon=False)\naxes[0, 1].text(0, 0, 'I am [0, 1]!', fontsize=30,\n                horizontalalignment='center')\n\n#------- Subplot 3 -------#\naxes[1, 0].plot(x, fun1_x, color='b', label='$e^{-x}\\cos 5x$')\naxes[1, 0].fill_between(x, fun1_x, 0, color='b', alpha=.125)\naxes[1, 0].set_title('$e^{-x}\\cos 5x$')\naxes[1, 0].set_xlabel('Angle (radians)')\naxes[1, 0].set_ylabel('Cosine Value')\naxes[1, 0].set_xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi])\naxes[1, 0].set_xticklabels(['$-\\pi$', '$-\\pi/2$', '0', '$\\pi/2$', '$\\pi$'])\naxes[1, 0].legend()\naxes[1, 0].text(0, 0, 'I am [1, 0]!', fontsize=30,\n                horizontalalignment='center')\n\n#------- Subplot 4 -------#\naxes[1, 1].plot(x, fun2_x, color='y', label='$e^{-x}\\sin 2x$')\naxes[1, 1].set_title('$e^{-x}\\sin 2x$')\naxes[1, 1].fill_between(x, fun2_x, 10, color='y', alpha=.125)\naxes[1, 1].set_xticks([-np.pi, -np.pi / 2, 0, np.pi / 2, np.pi])\naxes[1, 1].legend()\naxes[1, 1].text(0, 0, 'I am [1, 1]!', fontsize=30,\n                horizontalalignment='center')\n\n# 'flatten', 'opens' the 2D array into a simple 1D array\nfor a in axes.flatten():\n    a.grid(alpha=.5)\n\n# plt.tight_layout()\nplt.show(block=False)\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "7. Plotting",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/06_this-n-that/1_os_need_exercises.html",
    "href": "docs/python-basics/06_this-n-that/1_os_need_exercises.html",
    "title": "Files, Folders & OS (Need) Exercises",
    "section": "",
    "text": "Exercise 1 (Tidying a collaboration) ☻\n\nThe scenarioTask 1Task 2Task 3Task 4Task 5Task 6Task 7\n\n\nYou are a member of an international team analysing environmental pollution. The project involves ten cities: Cairo, Dhaka, Jakarta, Karachi, Manila, Melbourne, Osaka, Shanghai, Singapore, and Tokyo.\n\nYour task is to process and organise data from various environmental measurements. The provided zip file, os-collaboration-exercise-data.zip, contains all relevant data files for the past year.\nThings to note\n\nData Files: Each data file is named in the format month-date_city.txt (e.g., may-10_singapore.txt).\nData Collection: Data was recorded sporadically; not all days of each month have corresponding data files. The dates of data collection vary across the cities.\nExclusion of Files: Ignore any non-text files, such as those in .pdf, .png, or .jpg formats.\n\n\n\n\nWe like to convert the filename to a more useful numerical format. Specifically, we want to convert month-date-city.txt. (i.e. may-10-singapore.txt) to a mm-dd-city.txt (i.e. 05-10-singapore.txt) format.\nUsing the following dictionary (or otherwise), write a snippet of Python code to convert 'oct-08_singapore.txt' to 10-08-singapore.txt.\n{\n'jan': '01', 'feb': '02', 'mar': '03',\n'apr': '04', 'may': '05', 'jun': '06',\n'jul': '07', 'aug': '08', 'sep': '09',\n'oct': '10', 'nov': '11', 'dec': '12'\n}\n\n\n\n\nIncorporate your previous code into a function named rename_my_file(old_file_name) that accepts the old filename as the argument and returns the new file name.\n\n\n\n\nUse a for loop to apply the function rename_my_file() to the file list below.\n['oct-08_singapore.txt', 'jul-10_cairo.txt', 'may-15_dhaka.txt',\n 'may-13_cairo.txt', 'oct-21_cairo.txt', 'jan-10_singapore.txt',\n 'jun-20_tokyo.txt', 'aug-06_jakarta.txt', 'dec-21_karachi.txt',\n 'jan-01_tokyo.txt']\nPrint out your progress in the form old-file-name ----&gt; new-file-name\n\n\n\n\nWith the help of glob, use rename_my_file() to rename all the .txt files in the folder.\nNote that you might have to adjust your function rename_my_file() to accommodate the already renamed files.\n\n\n\n\nUse a for loop to create a folder for each city.The list of cities is provided below for your convenience.\n['Cairo', 'Dhaka', 'Jakarta', 'Karachi', 'Manila',\n 'Melbourne', 'Osaka', 'Shanghai', 'Singapore', 'Tokyo']\n\n\n\n\nUse glob to list all the files from Cairo.\nNow use a for loop and shutil.copy() to copy all the files related to Cairo to the corresponding folder you created.\n\n\n\n\nTweak your code to move all the files to the corresponding folders of all the cities.\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "6. OS",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good.html#lists-arrays-in-1d-subsetting-indexing",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good.html#lists-arrays-in-1d-subsetting-indexing",
    "title": "Storing Data (Good)",
    "section": "1.1 Lists & Arrays in 1D | Subsetting & Indexing",
    "text": "1.1 Lists & Arrays in 1D | Subsetting & Indexing\nSince slicing gives us a range of elements, we must specify two indices to indicate where to start and end. The various syntaxes for these are shown in the table below.\nThe following applies to both lists and arrays.\n\npy_list=[\"a1\", \"b2\", \"c3\", \"d4\", \"e5\",\n         \"f6\", \"g7\", \"h8\", \"i9\", \"j10\"]\nnp_array=np.array(py_list)\n\n# Pick one\nx = py_list  # OR\nx = np_array\n\n\n\n\n\n\n\n\n\n\nSyntax\nResult\n\nNote\n\n\n\n\nx[0]\nFirst element\n'a1'\n\n\n\nx[-1]\nLast element\n'j10'\n\n\n\nx[0:3]\nIndex 0 to 2\n['a1','b2','c3']\nGives \\(3−0=3\\) elements\n\n\nx[1:6]\nIndex 1 to 5\n['b2','c3','d4','e5','f6']\nGives \\(6−1=5\\) elements\n\n\nx[1:6:2]\nIndex 1 to 5 in steps of 2\n['b2','d4','f6']\nGives every other of \\(6−1=5\\) elements\n\n\nx[5:]\nIndex 5 to the end\n['f6','g7','h8','i9','j10']\nGives len(x)\\(−5=5\\) elements\n\n\nx[:5]\nIndex 0 to 5\n['a1','b2','c3','d4','e5']\nGives \\(5−0=5\\) elements\n\n\nx[5:2:-1]\nIndex 5 to 3 (i.e., in reverse)\n['f6','e5','d4']\nGives \\(5−2=3\\) elements\n\n\nx[::-1]\nReverses the list\n['j10','i9','h8',...,'b2','a1']\n\n\n\n\n\n\n\n\n\n\nRemember\n\n\n\nRemember slicing in Python can be a bit tricky.If you slice with [i:j], the slice will start at i and end at j-1, giving you a total of j-i elements.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good.html#arrays-only-subsetting-by-masking",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good.html#arrays-only-subsetting-by-masking",
    "title": "Storing Data (Good)",
    "section": "1.2 Arrays only | Subsetting by masking",
    "text": "1.2 Arrays only | Subsetting by masking\nOne of the most powerful things you can do with NumPy arrays is subsetting by masking. To make sense of this, consider the following.\n\nnp_array = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nmy_mask = np_array &gt; 3\nmy_mask\n\narray([False, False, False,  True,  True,  True,  True,  True,  True,\n        True])\n\n\nThe answer to my question is in the form of a ‘Yes’/‘No’ or True/False format. I can use this True/False format to ask NumPy to show me only those that are True by\n\nnp_array[my_mask]\n\narray([ 4,  5,  6,  7,  8,  9, 10])\n\n\nThis is why I used the term ‘masking’. The True/False answer acts like a mask allowing only the True subset to be seen.\n\n\n\n\n\n\nRemember\n\n\n\nRemember that subsetting by masking only works with NumPy arrays.\n\n\nInstead of creating another variable, I can also do all of this succinctly as:\n\nnp_array[np_array &gt; 3]\n\narray([ 4,  5,  6,  7,  8,  9, 10])\n\n\nLet me show you a few more quick examples\n\n\n\nnp_array[~(np_array &gt; 3)]                 # '~' means 'NOT'\n\n\n\nWe can invert our mask by using the ~.~ is called the Bitwise Not operator.\n\n\n\narray([1, 2, 3])\n\n\n\n\n\n\nnp_array[(np_array &gt; 3) & (np_array &lt; 8)] # '&' means 'AND'\n\n\n\nWe can combine one mask AND another mask.(AND will show something only if both masks are true.)\n\n\n\narray([4, 5, 6, 7])\n\n\n\n\n\n\nnp_array[(np_array &lt; 3) | (np_array &gt; 8)] # '|' means 'OR'\n\n\n\nWe can combine one mask OR another mask.(OR will show something if either mask is true.)\n\n\n\narray([ 1,  2,  9, 10])\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemember\n\n\n\nRemember:\n\nAlways use the Bitwise NOT(~), Bitwise OR(|) and Bitwise AND(&) when combining masks with NumPy.\nAlways use brackets to clarify what you are asking the mask to do.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good.html#lists-arrays-in-2d-indexing-slicing",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good.html#lists-arrays-in-2d-indexing-slicing",
    "title": "Storing Data (Good)",
    "section": "1.3 Lists & Arrays in 2D | Indexing & Slicing",
    "text": "1.3 Lists & Arrays in 2D | Indexing & Slicing\nThe differences between lists and arrays become even more apparent with higher dimensional lists and arrays. Especially when you try indexing and slicing in higher dimensions.\nLet’s consider the following 2D list.\n\npy_list_2d = [[1, \"A\"], [2, \"B\"], [3, \"C\"], [4, \"D\"],\n              [5, \"E\"], [6, \"F\"], [7, \"G\"], [8, \"H\"],\n              [9, \"I\"], [10, \"J\"]]\n\nnp_array_2d = np.array(py_list_2d)\n\n\n\n\nWhat is at position 4 (index 3)?\npy_list_2d[3]\nnp_array_2d[3]\n\n\n\n\n[4, 'D']\n\n\n\n\narray(['4', 'D'], dtype='&lt;U21')\n\n\n\n\n\n\nWhat is the FIRST element at position 4 (index 3)\npy_list_2d[3][0]\nnp_array_2d[3, 0]\n\n\n\n\n4\n\n\n\n\n\n'4'\n\n\nNotice how the syntax for arrays uses just a single pair of square brackets ([ ]).\n\n\n\n\n\nWhat are the first three elements?\npy_list_2d[:3]\nnp_array_2d[:3]\n\n\n\n\n[[1, 'A'], [2, 'B'], [3, 'C']]\n\n\n\n\narray([['1', 'A'],\n       ['2', 'B'],\n       ['3', 'C']], dtype='&lt;U21')\n\n\n\n\n\n\nHmmm…\npy_list_2d[:3][0]\nnp_array_2d[:3, 0]\n\n\n\n\n\n[1, 'A']\n\n\nYou might think that this will yield the first elements (i.e., [1, 2, 3]) of all the sub-lists up to index 2.No! Instead, it gives the first of the list you get from py_list_2d[:3].\n\n\n\n\narray(['1', '2', '3'], dtype='&lt;U21')\n\n\nNotice how differently NumPy arrays work.\n\n\n\n\n\npy_list_2d[3:6][0]\nnp_array_2d[3:6, 0]\nnp_array_2d[:, 0]\n\n\n\n\n\n[4, 'D']\n\n\n\n\n\n\narray(['4', '5', '6'], dtype='&lt;U21')\n\n\nIf you want ‘everything’ you just use :.\n\n\narray(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'], dtype='&lt;U21')",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good.html#growing-lists",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good.html#growing-lists",
    "title": "Storing Data (Good)",
    "section": "1.4 Growing lists",
    "text": "1.4 Growing lists\nNumPy arrays are invaluable, and their slicing syntax (e.g. [:3,0]) is more intuitive than lists. So, why do we even bother with lists? One advantage of lists is their ease and efficiency in growing. NumPy arrays are fantastic for fast math operations, provided you do not change their size1. So, I will not discuss how to change the size of a NumPy array. Instead, let me show you how to grow a list. This will be useful later; for instance when you try to solve differential equations numerically.\n\n\n\nCreating a larger list from a smaller one.\n\nx=[1, 2]*5\nx\n\n[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n\n\n\n\nThree ways to grow a list by appending one element at a time.\nx=[1]\nx= x + [2]\nx= x + [3]\nx= x + [4]\nx\nx=[1]\nx+= [2]\nx+= [3]\nx+= [4]\nx\nx=[1]\nx.append(2)\nx.append(3)\nx.append(4)\nx\n\n\n\n\n[1, 2, 3, 4]\n\n\n\n\n[1, 2, 3, 4]\n\n\n\n\n[1, 2, 3, 4]\n\n\n\n\nIf you are wondering, there are differences between these three versions. Their execution speeds are different; the version with append() runs about 1.5 times faster than the rest!\n\n\nHere are three ways of incorporating multiple elements.Notice the difference between the effects of extend() and append().\nx = [1, 2, 3]\nx += [4, 5, 6]\nx\nx=[1, 2, 3]\nx.extend([4, 5, 6])\nx\nx=[1, 2, 3]\nx.append([4, 5, 6])\nx\n\n\n\n\n[1, 2, 3, 4, 5, 6]\n\n\n\n\n[1, 2, 3, 4, 5, 6]\n\n\n\n\n[1, 2, 3, [4, 5, 6]]",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good.html#tuples",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good.html#tuples",
    "title": "Storing Data (Good)",
    "section": "1.5 Tuples",
    "text": "1.5 Tuples\nBefore we end this section, I must introduce you to another data storage structure called a tuple. Tuples are similar to lists, except they use ( ) and cannot be changed after creation (i.e., they are immutable).\nLet me first create a simple tuple.\n\na=(1, 2, 3)     # Define tuple\n\nWe can access its data…\n\nprint(a[0])    # Access data\n\n1\n\n\nBut, we cannot change the data.\n# The following will NOT work\na[0]=-1\na[0]+= [10]",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good.html#be-very-careful-when-copying",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good.html#be-very-careful-when-copying",
    "title": "Storing Data (Good)",
    "section": "1.6 Be VERY careful when copying",
    "text": "1.6 Be VERY careful when copying\nVariables in Python have subtle features that might make your life miserable if you are not careful. You should be particularly mindful when making copies of lists and arrays.\nFor example, if you want to copy a list, you might be tempted to do the following; PLEASE DON’T!\nx=[1, 2, 3]\ny=x           # DON'T do this!\nz=x           # DON'T do this!\nThe correct way to do this is as follows:\nx=[1, 2, 3]\ny=x.copy()\nz=x.copy()\nNote: At this stage, you only have to know that you must use copy() to be safe; you do not have to understand why. However, if you want to, please refer to the discussion on mutable and immutable objects.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/2_storing-data_good.html#footnotes",
    "href": "docs/python-basics/03_storing-data/2_storing-data_good.html#footnotes",
    "title": "Storing Data (Good)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe gains in speed are due to NumPy doing things to all the elements in the array in one go. For this, the data needs to be stored in a specific order in memory. Adding or removing elements hinders this optimization. When you change the size of a NumPy array, NumPy destroys the existing array and creates a new one, making it extremely inefficient.↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#lets-compare",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#lets-compare",
    "title": "Storing Data (Need)",
    "section": "1.1 Let’s compare",
    "text": "1.1 Let’s compare\nLet me show you how to store the same information (in this case, some superhero data) using lists, arrays and dictionaries.\nPython Lists\n\npy_super_names = [\"Black Widow\", \"Iron Man\", \"Doctor Strange\"]\npy_real_names = [\"Natasha Romanoff\", \"Tony Stark\", \"Stephen Strange\"]\n\nNumpy Arrays\n\nnp_super_names = np.array([\"Black Widow\", \"Iron Man\", \"Doctor Strange\"])\nnp_real_names = np.array([\"Natasha Romanoff\", \"Tony Stark\", \"Stephen Strange\"])\n\nDictionary\n\nsuperhero_info = {\n    \"Natasha Romanoff\": \"Black Widow\",\n    \"Tony Stark\": \"Iron Man\",\n    \"Stephen Strange\": \"Doctor Strange\"\n}\n\nNotice:\n\nDictionaries use a key and an associated value separated by a :\nThe dictionary very elegantly holds the real and superhero names in one structure while we need two lists (or arrays) for the same data.\nFor lists and arrays, the order matters. I.e. ‘Iron Man’ must be in the same position as ‘Tony Stark’ for things to work.\n\nLists (and arrays) offer many features that dictionaries don’t and vice versa. I will demonstrate these in a bit. Which data storage strategy to choose will depend on the problem you are trying to solve. More on this later; for the moment…\n\n\n\n\n\n\nRemember\n\n\n\nThere are three basic ways of storing data:\n\nlists,\nNumPy arrays and\ndictionaries.\n\n\n\nBy the way,\n\nI added py and np in front of the variable for clarity. You can choose any name for the variables (provided that they are not a Python keyword like for, if).\nI am being lazy; when I say ‘arrays’, I mean ‘NumPy arrays’, and when I say ‘lists’, I mean ‘Python lists’.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#accessing-data-from-a-list-or-array",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#accessing-data-from-a-list-or-array",
    "title": "Storing Data (Need)",
    "section": "1.2 Accessing data from a list (or array)",
    "text": "1.2 Accessing data from a list (or array)\nTo access data from lists (and arrays), we need to use an index corresponding to the data’s position. Python is a zero-indexed language, meaning it starts counting at 0. So if you want to access a particular element in the list (or array), you need to specify the relevant index starting from zero. The image below shows the relationship between the position and index.\n\n\n\n\n\n\npy_super_names = [\"Black Widow\", \"Iron Man\", \"Doctor Strange\"]\npy_real_names = [\"Natasha Romanoff\", \"Tony Stark\", \"Stephen Strange\"]\n\n\n\n\n\npy_real_names[0]\n\n'Natasha Romanoff'\n\n\n\n\n\npy_super_names[0]\n\n'Black Widow'\n\n\n\n\nUsing a negative index allows us to count from the back of the list. For instance, using the index -1 will give the last element. This is super useful because we can easily access the last element without knowing the list size.\n\npy_super_names[2]    # Forward indexing \n                     # We need to know the size \n                     # beforehand for this to work.\n\n'Doctor Strange'\n\npy_super_names[-1]   # Reverse indexing\n\n'Doctor Strange'\n\n\n\n\n\n\n\n\n\n\n\nRemember\n\n\n\nData in lists (and arrays) must be accessed using a zero-based index.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#accessing-data-from-a-dictionary",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#accessing-data-from-a-dictionary",
    "title": "Storing Data (Need)",
    "section": "1.3 Accessing data from a dictionary",
    "text": "1.3 Accessing data from a dictionary\nDictionaries hold data (values) paired with a key. i.e. you can access the value (in this case, the superhero name) using the real name as a key. Here is how it works:\n\nsuperhero_info = {\n    \"Natasha Romanoff\": \"Black Widow\",\n    \"Tony Stark\": \"Iron Man\",\n    \"Stephen Strange\": \"Doctor Strange\"\n}                  \n\n\nsuperhero_info[\"Natasha Romanoff\"]\n\n'Black Widow'\n\n\n\n\n\n\n\n\nRemember\n\n\n\nRemember that dictionaries have a key-value structure.\n\n\nIf you want, you can access all the keys and all the values as follows:\n\nsuperhero_info.keys()\n\ndict_keys(['Natasha Romanoff', 'Tony Stark', 'Stephen Strange'])\n\n\n\nsuperhero_info.values()\n\ndict_values(['Black Widow', 'Iron Man', 'Doctor Strange'])",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#higher-dimensional-lists",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#higher-dimensional-lists",
    "title": "Storing Data (Need)",
    "section": "1.4 Higher dimensional lists",
    "text": "1.4 Higher dimensional lists\nUnlike with a dictionary, we needed two lists to store the corresponding real and superhero names. An obvious way around the need to have two lists is to have a 2D list (or array) as follows.\npy_superhero_info = [['Natasha Romanoff', 'Black Widow'],\n                     ['Tony Stark', 'Iron Man'],\n                     ['Stephen Strange', 'Doctor Strange']]",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#size",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#size",
    "title": "Storing Data (Need)",
    "section": "2.1 Size",
    "text": "2.1 Size\nOften, you need to know how many elements there are in lists or arrays. We can use the len() function for this purpose for both lists and arrays. However, arrays also offer other options.\n\npy_list_2d = [[1, \"A\"], [2, \"B\"], [3, \"C\"], [4, \"D\"],\n              [5, \"E\"], [6, \"F\"], [7, \"G\"], [8, \"H\"],\n              [9, \"I\"], [10, \"J\"]]\n\nnp_array_2d = np.array(py_list_2d)      # Reusing the Python list \n                                        # to create a NEW\n                                        # NumPy array\n\nlen(py_list_2d)\nlen(np_array_2d)\nnp_array_2d.shape\n\n\n\nLists\n\n\n10\n\n\n\n\nArrays\n\n\n10\n\n\n\n\n(10, 2)\n\n\nNotice the absence of brackets ( ) in shape above. This is because shape is not a function. Instead, it is a property or attribute of the NumPy array.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#arrays-are-fussy-about-type",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#arrays-are-fussy-about-type",
    "title": "Storing Data (Need)",
    "section": "2.2 Arrays are fussy about type",
    "text": "2.2 Arrays are fussy about type\nPlease recall the previous discussion about data types (e.g., int, float, str). One prominent difference between lists and arrays is that arrays insist on having only a single data type; lists are more accommodating. Consider the following example and notice how the numbers are converted to English (' ') when we create the NumPy array.\n\npy_list = [1, 1.5, 'A']\nnp_array = np.array(py_list)\n\npy_list\nnp_array\n\n\n\nLists\n\n\n[1, 1.5, 'A']\n\n\n\n\nArrays\n\n\narray(['1', '1.5', 'A'], dtype='&lt;U32')\n\n\n\n\n\nWhen dealing with datasets with both numbers and text, you must be mindful of this restriction. However, this is just an annoyance and not a problem as we can easily change type (typecast) using the ‘hidden’ function astypes(). More about this in a later chapter. For the moment,\n\n\n\n\n\n\nRemember\n\n\n\nRemember that NumPy arrays tolerate only a single type.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#adding-a-number",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#adding-a-number",
    "title": "Storing Data (Need)",
    "section": "2.3 Adding a number",
    "text": "2.3 Adding a number\n\npy_list = [1, 2, 3, 4, 5]\nnp_array = np.array(py_list)         # Reusing the Python list\n                                     # to create a NEW\n                                     # NumPy array\n\nnp_array + 10\n\n\n\nLists\npy_list + 10        # Won't work!\n\n\nArrays\n\n\narray([11, 12, 13, 14, 15])",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#adding-another-list",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#adding-another-list",
    "title": "Storing Data (Need)",
    "section": "2.4 Adding another list",
    "text": "2.4 Adding another list\n\npy_list_1 = [1, 2, 3, 4, 5]\npy_list_2 = [10, 20, 30, 40, 50]\n\nnp_array_1 = np.array(py_list_1)\nnp_array_2 = np.array(py_list_2)\n\npy_list_1 + py_list_2\nnp_array_1 + np_array_2\n\n\n\nLists\n\n\n[1, 2, 3, 4, 5, 10, 20, 30, 40, 50]\n\n\n\n\nArrays\n\n\narray([11, 22, 33, 44, 55])\n\n\n\n\n\nSo, adding lists causes them to grow while adding arrays is an element-wise operation.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#multiplying-by-a-number",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#multiplying-by-a-number",
    "title": "Storing Data (Need)",
    "section": "2.5 Multiplying by a Number",
    "text": "2.5 Multiplying by a Number\n\npy_list = [1, 2, 3, 4, 5]\nnp_array = np.array(py_list)         \n\npy_list*2\nnp_array*2\n\n\n\nLists\n\n\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n\n\n\n\nArrays\n\n\narray([ 2,  4,  6,  8, 10])\n\n\n\n\n\nSo multiplying by a number makes a list grow, whereas an array multiplies its elements by the number!",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#squaring",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#squaring",
    "title": "Storing Data (Need)",
    "section": "2.6 Squaring",
    "text": "2.6 Squaring\n\npy_list = [1, 2, 3, 4, 5]\nnp_array = np.array(py_list)\n\nnp_array**2\n\n\n\nLists\npy_list**2                      # Won't work!  \n\n\nArrays\n\n\narray([ 1,  4,  9, 16, 25])",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#asking-questions",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#asking-questions",
    "title": "Storing Data (Need)",
    "section": "2.7 Asking questions",
    "text": "2.7 Asking questions\n\npy_list = [1, 2, 3, 4, 5]\nnp_array = np.array(py_list)         \n\npy_list == 3     # Works, but what IS the question?\nnp_array == 3  \nnp_array &gt; 3  \n\n\n\nLists\n\n\n\n\n\nFalse\n\n\n\n\npy_list &gt; 3      # Won't work!\n\n\n\n\n\nArrays\n\n\n\n\n\narray([False, False,  True, False, False])\n\n\n\n\n\n\narray([False, False, False,  True,  True])",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#mathematics",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#mathematics",
    "title": "Storing Data (Need)",
    "section": "2.8 Mathematics",
    "text": "2.8 Mathematics\n\npy_list = [1, 2, 3, 4, 5]\nnp_array = np.array(py_list)         \n\nsum(py_list)     # sum() is a base Python function\nmax(py_list)     # max() is a base Python function\nmin(py_list)     # min() is a base Python function\nnp_array.sum()\nnp_array.max()\nnp_array.min()\nnp_array.mean()\nnp_array.std()\n\n\n\nLists\n\n\n\n\n\n15\n\n\n\n\n\n\n5\n\n\n\n\n\n\n1\n\n\n\n\npy_list.sum()   # Won't work!\n\n\n\n\n\nArrays\n\n\n\n\n\n15\n\n\n\n\n\n\n5\n\n\n\n\n\n\n1\n\n\n\n\n\n\n3.0\n\n\n\n\n\n\n1.4142135623730951\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemember\n\n\n\n(roughly speaking) an operation on a list works on the whole list. In contrast, an operation on an array works on the individual elements of the array.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/03_storing-data/1_storing-data_need.html#footnotes",
    "href": "docs/python-basics/03_storing-data/1_storing-data_need.html#footnotes",
    "title": "Storing Data (Need)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor example, think of how easy it is to do row or column manipulations of data when put into a spreadsheet format↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "3. Storing Data",
      "Storing Data (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/1_functions_need_exercises.html",
    "href": "docs/python-basics/05_functions/1_functions_need_exercises.html",
    "title": "Functions (Need) Exercises",
    "section": "",
    "text": "Exercise 1 (Do you know why?) ☻\nThe following code works as expected despite not having an else statement. Please use a Markdown cell to explain why?\ndef greeting(name):\n    if name == 'Batman':\n        return 'Hello Batman! So, nice to meet you!'\n    return f'Hello {name}!'\n\n\nExercise 2 (Chubby or not) ☻\nWrite a Python function named calculate_bmi.\n\nThe function should take two parameters:\nweight (in kilograms) and height (in meters).\nThe function should calculate the BMI (Body Mass Index) using the formula BMI = weight / (height ** 2).\nBased on the calculated BMI, the function should return a string indicating the BMI category based on the following criteria:\n\n\n\n\n\nCategory\nBMI Range\n\n\n\n\nUnderweight\nBMI less than 18.5\n\n\nNormal weight\nBMI between 18.5 and 24.9\n\n\nOverweight\nBMI between 25 and 29.9\n\n\nObesity\nBMI 30 or more\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "![](exerise_icon.png){.exercise-icon-in-toc}Exercise (Need)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good.html#assert",
    "href": "docs/python-basics/05_functions/2_functions_good.html#assert",
    "title": "Functions (Good)",
    "section": "1.1 assert",
    "text": "1.1 assert\nPython has a command called assert that can check a condition and halt execution if necessary. It also gives the option of printing a message.\nThe basic syntax is as follows:\nassert condition-to-check, message\nassert stops the flow if the condition fails. Here is an example.\nassert x &gt;= 0, \"x is becoming negative!\"\nThe program will run for as long as the condition is True. If it fails, then an AssertationError is raised, and the program stops running!\n\n\n\n\n\n\nThe following will run without a problem.\nx = 10\nassert x &gt;= 0, \"x is becoming negative!\"\n\n\nThe following will throw an error and stop.\nx = -1\nassert x &gt;= 0, \"x is becoming negative!\"",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good.html#try-except",
    "href": "docs/python-basics/05_functions/2_functions_good.html#try-except",
    "title": "Functions (Good)",
    "section": "1.2 try-except",
    "text": "1.2 try-except\nA technical name for things going wrong is exceptions. For example, division by zero will raise a ZeroDivisionError. An exception left unhandled will halt the flow of the programme. However, if you are a control freak, Python offers an (absurdly) simple ‘try-except’ structure to catch and handle these exceptions yourself.\nThe try-except syntax can also ensure that your programme can handle some situations beyond your control. For example, when I use Python to speak to the Canvas server, I use try-except to handle situations when the server does not respond.\nLet me show you how to use the try-except flow control statement.\nWe can solicit a user response using the input() function. Let’s say we do this and ask for a number, as shown in the snippet below.\nnumber=input(\"Give me a number and I will calculate its square.\")\nsquare=int(number)**2              # Convert English to number\nprint(f'The square of {number} is {square}!')\nThis will work fine if the typecasting int(number) makes sense. What if the input is not a number but something else like ‘hahaha’?\nLet’s use the try-except to get around this problem.\ntry:\n    number=input(\"Give me a number and I will calculate its square.\")\n    square=int(number)**2\n    print(f'The square of {number} is {square}!')\nexcept:\n    print(f\"Oh oh! I cannot square {number}!\")\nNotice how I have enclosed (and protected) that part of the code that we think can potentially lead to trouble in the try block. If something (anything) goes wrong, Python will ignore the error and run the code in the except block.\nYou can have more control over how the expetions are handled with a try-except block. However, we do not have to worry about that at this point.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good.html#a-simple-suggestion",
    "href": "docs/python-basics/05_functions/2_functions_good.html#a-simple-suggestion",
    "title": "Functions (Good)",
    "section": "1.3 A simple suggestion",
    "text": "1.3 A simple suggestion\nWhen starting out with some code, it is always good for your code to signal to the outside world that it has finished certain milestones. A ‘soft’ way to do this is to include ‘print()’ statements here and there to let the outside world know what is happening in the innards of your program. Otherwise, you will stare at a blank cell, wondering what is happening.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good.html#positional-keyword-and-default-arguments",
    "href": "docs/python-basics/05_functions/2_functions_good.html#positional-keyword-and-default-arguments",
    "title": "Functions (Good)",
    "section": "2.1 Positional, keyword and default arguments",
    "text": "2.1 Positional, keyword and default arguments\nIn the past chapter, some of you may have noticed that I was (carelessly) switching between passing two styles of passing arguments to the function greeting(). I wrote greeting('Super Man') or greeting(name='Super Man'). We need to talk a bit more about this so that you are not bewildered when you see other people’s code.\nThere are three ‘ways’ to pass a value to an argument. I will call them positional, keyword or default. To make this clearer, consider the following function.\n\ndef side_by_side(a, b, c=42):\n    return f'{a: 2d}|{b: 2d}|{c: 2d}'\n\nHere are three ways I can use this function.\n\n\n\n\n\n\nPositional\nside_by_side(1, 2, 3)\nHere, I am telling Python to assign 1, 2, 3 to a, b, c using the positional order of the arguments.\n\n\nKeywords\nside_by_side(c=3, b=1, a=2)\nHere, I explicitly specify the keyword to assign the values to each of a, b, c. (No, the order does not matter)\n\n\nDefault\nside_by_side(1, b=2)\nHere, since c is optional, I can choose not to specify it (of course, provided I want c to be 1).\n\n\n\nBelow are some examples of how you can combine these three styles. However, one style (keyword followed by positional) confuses Python and won’t work.\n\nside_by_side(1, 2)           # Two positional, 1 default\n## ' 1| 2| 42'\nside_by_side(1, 2, 3)        # Three positional\n## ' 1| 2| 3'\nside_by_side(a=1, b=2)       # Two keyword, 1 default\n## ' 1| 2| 42'\nside_by_side(c=3, b=1, a=2)  # Three keyword\n## ' 2| 1| 3'\nside_by_side(1, c=3, b=2)    # One positional, 2 keyword\n## ' 1| 2| 3'\nside_by_side(1, b=2)         # One positional, 1 keyword, 1 default\n## ' 1| 2| 42'\n\nLet me reiterate that the following will not work because Python cannot unambiguously determine the position of 1?\n# Keywords cannot be followed \n# by positional arguments\nside_by_side(a=2, 1)      # Won't work.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good.html#docstrings",
    "href": "docs/python-basics/05_functions/2_functions_good.html#docstrings",
    "title": "Functions (Good)",
    "section": "2.2 Docstrings",
    "text": "2.2 Docstrings\nPython has a docstring feature that allows us to document what a function does inside the function. This documentation (i.e., the docstring) is displayed when we ask Python to show us the help info using help().\nHere is a simple example.\n\ndef side_by_side(a, b, c=42):\n    '''\n    A test function to demonstrate how \n    positional, keyword and default arguments \n    work.\n    '''\n    return f'{a: 2d}|{b: 2d}|{c: 2d}'\n\nA docstring needs to be sandwiched between a pair of ''' (or \"\"\") and can span multiple lines.\nLet’s see if it works by asking for help.\n\nhelp(side_by_side)\n\nHelp on function side_by_side in module __main__:\n\nside_by_side(a, b, c=42)\n    A test function to demonstrate how \n    positional, keyword and default arguments \n    work.\n\n\nDocstrings can be used for writing multiline comments, but the practice is frowned upon by Puritans; so if you misuse it be ready for their ire!",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good.html#function-are-first-class-citizens",
    "href": "docs/python-basics/05_functions/2_functions_good.html#function-are-first-class-citizens",
    "title": "Functions (Good)",
    "section": "2.3 Function are first-class citizens",
    "text": "2.3 Function are first-class citizens\nPython functions are called first-class citizens because they have the same privileges as variables. This opens up useful possibilities for scientific programming because we can pass a function as an argument to another function!\nConsider this:\n\ndef my_function(angle, trig_function):\n        return trig_function(angle)\n\n# Let's use the function\nmy_function(np.pi/2, np.sin)        \n## 1.0\nmy_function(np.pi/2, np.cos)        \n## 6.123233995736766e-17\nmy_function(np.pi/2, lambda x: np.cos(2*x))  \n## -1.0\n\nNote: When we pass a function as an argument, we do not include the parenthesis ().",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Good)"
    ]
  },
  {
    "objectID": "docs/python-basics/05_functions/2_functions_good.html#more-about-unpacking",
    "href": "docs/python-basics/05_functions/2_functions_good.html#more-about-unpacking",
    "title": "Functions (Good)",
    "section": "2.4 More about unpacking",
    "text": "2.4 More about unpacking\nThere is more to unpacking. For example, unpacking can make extracting information from lists and arrays a breeze. Here are some examples.\n\n\n\n\nx, y, z = [1, 2, 3]\nx, y, z\n\n(1, 2, 3)\n\n\n\n\n\nx, y, z = np.array([1, 2, 3])\nx, y, z\n\n(1, 2, 3)\n\n\n\n\n\nx, *y, z = np.array([1, 2, 3, 4, 5])\nx, y, z\n\n(1, [2, 3, 4], 5)\n\n\n\n\n\nx, *_, y = [1, 2, 3, 4, 5]\nx, y\n\n(1, 5)",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(B) Python (Basics)",
      "5. Functions",
      "Functions (Good)"
    ]
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#random-numbers-from-the-normal-distribution",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#random-numbers-from-the-normal-distribution",
    "title": "Random Numbers (Good)",
    "section": "2.1 Random numbers from the Normal distribution",
    "text": "2.1 Random numbers from the Normal distribution\n\n\n\n\n\nBefore we draw random numbers from a Normal distribution (also known as a Gaussian distribution), let’s remind ourselves what the Normal distribution is. With the characteristic shape shown in the plots above (that I borrowed from Wikipedia), the Normal distribution is defined by two parameters. The mean \\(\\mu\\) and the standard deviation \\(\\sigma\\). The mean decides the centre’s location and the standard deviation decides the chubbiness. A feature of the Normal distribution (as indicated in the image above) is that 68% of the points lie between \\(\\mu\\pm\\sigma\\). The mathematical form of this distribution is:\n\\[\nf(x)=\\dfrac{1}{\\sigma \\sqrt{2\\pi}}{\\large e}^{-\\dfrac{1}{2}\\left(\\dfrac{x-\\mu}{\\sigma}\\right)^2}\n\\]\nThe function we need to draw normal random samples is np.random.normal(loc=, scale=, size=). loc is used to specify the mean and scale the standard deviation. For example:\n\nnp.random.normal(loc=5, scale=2, size=10)\n\narray([6.23467679, 5.69110152, 6.2548526 , 4.91412283, 5.26087859,\n       6.01631475, 3.54998986, 3.3420698 , 7.65130615, 6.00569723])"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#visualising-the-random-numbers",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#visualising-the-random-numbers",
    "title": "Random Numbers (Good)",
    "section": "2.2 Visualising the random numbers",
    "text": "2.2 Visualising the random numbers\nIt isn’t easy to see that the above numbers are from a Normal distribution. However, it is easier if we plot the data, as we did before.\n\n\n\n\n\n\nn = 1_000_0\nrandom_numbers = np.random.normal(loc=5, scale=2, size=n)\n\nfig, ax = plt.subplots(nrows=1, ncols=2)\n\naxis = ax[0]\naxis.hist(random_numbers, bins=100, alpha=.25)\naxis.set_xlabel(\"Value of random number\")\naxis.set_ylabel(\"Frequency\")\n\naxis = ax[1]\naxis.scatter(range(n), random_numbers, alpha=.25)\naxis.set_xlabel(\"Position in the random number list\")\naxis.set_ylabel(\"Value of random number\")\n\nI hope this visualisation will help you understand what I meant by drawing a number from a Normal distribution."
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#section",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#section",
    "title": "Random Numbers (Good)",
    "section": "2.3 68%?",
    "text": "2.3 68%?\nLet’s check if the Normal random numbers given to us satisfy the 68% condition?\n\nn = 10_000\nmean, sd = 5, 2\nrandom_numbers = np.random.normal(loc=mean, scale=sd, size=n)\n\nmask = (random_numbers &gt;= mean - sd) & (random_numbers &lt;= mean + sd)\n\nprint(f'% of points between 1 std.dev. from the mean: {np.sum(mask)/n*100:.2f}%')\n\n% of points between 1 std.dev. from the mean: 68.43%"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#the-scenario",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#the-scenario",
    "title": "Random Numbers (Good)",
    "section": "3.1 The scenario",
    "text": "3.1 The scenario\nLet’s simulate a simple random walk1 in 1D. The scenario is such that a particle is restricted to moving in 1D (i.e. only along a line). It moves in steps, either one unit to the left or one to the right. The choice of left or right is selected randomly. Let’s take the probability of going right as \\(p\\), and going left is \\(q\\) (\\(=1-p\\))."
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#the-simulation",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#the-simulation",
    "title": "Random Numbers (Good)",
    "section": "3.2 The simulation",
    "text": "3.2 The simulation\nI can encapsulate the above information as a function as follows:\ndef brown_1d(prob_right=.5, no_of_steps=10000):\n    ''' \n        This function returns the final position of the particle \n        after the number of steps.\n        prob_right is the probability of going right.\n    '''\n\n    step_size = 1    \n    x = 0                               # starting x position\n\n    for _ in range(no_of_steps):\n        if rnd.random() &lt; prob_right:   # Go right?\n            x += step_size\n        else:\n            x -= step_size\n\n    return x\nBefore going ahead, I am tired of having to type np.random.! Time to get lazy by:\n\nimport numpy.random as rnd\n\nNow I can just use rnd! So, back to the main story…\nEach time I run this function, I will get a different value. However, I like to see if there is a pattern. Let me repeat an experiment of 1000 steps 10,000 times to see what I get.\nno_of_steps, p = 1_000, .5\nrepeats = 10_000\nresults = [brown_1d(prob_right=p, no_of_steps=no_of_steps)\n           for _ in range(repeats)]\n\nplt.hist(results, bins=25, density=True)\nplt.xlabel(f'Distance from the origin after {no_of_steps} steps')\nplt.title(f'Probability distribution for 1D Random walk with p={p}')\nNote that I have put density=True to ask Matplotlib to normalise the area under the curve to 1.\n\n\n\n\n\nInteresting; the distribution looks familiar since \\(p=.5\\) is symmetrical about the starting position. I am curious to see what happens if I increase the probability \\(p\\) to 0.6. Then, the curve should shift to the right. Let’s see if this happens. I will not show the code because it is the same as above."
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#what-does-theory-say",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#what-does-theory-say",
    "title": "Random Numbers (Good)",
    "section": "3.3 What does theory say?",
    "text": "3.3 What does theory say?\nA theoretical analysis of 1D random walks predicts that the distribution of positions should have a mean of \\(N(p - q)\\) and a standard deviation of \\(\\sqrt{4N pq}\\) (where \\(N\\) is the total number of steps). The distribution is actually Binomial, but since we have a large number of steps, it approximates a Gaussian. So, let’s overlay a Normal distribution over our previous plots to see how well our simulation agrees with the theory.\nHere is the function I used for the Normal distribution, which is the equation I showed you earlier.\ndef normal(x, m=0, s=1):\n    '''\n    Probability density function for the\n    Gaussian distribution.\n    '''\n    s2 = s**2\n    output = np.exp(-(x-m)**2/(2*s2))\n    output /= np.sqrt(2*np.pi*s2)\n    return output\nI can use the following code to overlay this on my histogram:\nprob_left = 1 - prob_right                       # q = 1 -p\nmean = no_of_steps * (prob_right - prob_left)    # mean = N(p - q)\nsd = np.sqrt(4*no_of_steps*prob_right*prob_left) # sd = sqrt(4 N p q)\nx = np.unique(results)                           # Numbers that form \n                                                 # the x-axis\nplt.plot(x, normal(x, mean, sd), label='Theoretical')\nHere is what I got.\n \nNeat!\nBy the way, techniques such as the above that involve random numbers are called Monte Carlo methods. This is because random numbers are associated with gambling, and the city of Monte Carlo is famous for the latter."
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#the-method",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#the-method",
    "title": "Random Numbers (Good)",
    "section": "4.1 The method",
    "text": "4.1 The method\n\nConsider a circle inscribed on a square surface, as shown above. Let’s take the radius of the circle to be 1. Then, if we throw a large number (\\(N_{total}\\)) of grains of sand randomly onto this surface, the number of grains landing on the green, the circular area will be related to the number on the total area by:\n\\[\n\\begin{align*}\\frac{N_{green}}{N_{total}}\\approx \\frac{\\text{Area of green region}}{\\text{Area of square}}\n\\end{align*}\n\\]\nBut we know the formulae for the areas! So,\n\\[\n\\begin{align*}\n\\frac{\\text{Area of green region}}{\\text{Area of square}}&= \\frac{\\pi (1)^2}{2\\times 2}=\\frac{1}{4}\\pi \\quad\\Rightarrow \\quad\\pi  = 4\\left(\\frac{\\text{Area of green region}}{\\text{Area of square}}\\right)\n\\end{align*}\n\\]\n\\[\n\\text{i.e.}\\qquad\\pi  \\approx 4\\left(\\frac{N_{green}}{N_{total}}\\right)\n\\]\nWe can simulate this experiment by randomly ‘creating’ points (to represent where a grain of sand will land) by using NumPy’s PRNG. We can then decide if this grain of sand is inside or outside to get \\(N_{green}\\) and then go on to get an estimate for \\(\\pi\\)!"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#a-poor-but-intuitive-solution",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#a-poor-but-intuitive-solution",
    "title": "Random Numbers (Good)",
    "section": "4.2 A poor but intuitive solution",
    "text": "4.2 A poor but intuitive solution\nLet me start with a (poor) but intuitive solution by throwing one grain at a time.\n\nN_total = 100_000                             # Yes, Python allows the _\nN_green = 0\n\nfor _ in range(N_total):\n    x = rnd.uniform(low=-1, high=1, size=1)     \n    y = rnd.uniform(low=-1, high=1, size=1)\n    r = np.sqrt(x**2 + y**2)                   # Distance from the origin\n\n    if r &lt;= 1:\n        N_green += 1                           # In or out of the circle\n\n4 * N_green / N_total                          # Estimate for pi\n\n3.13552\n\n\nThis solution is slow because of the way we are drawing out the random number, one at a time"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#a-better-solution",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#a-better-solution",
    "title": "Random Numbers (Good)",
    "section": "4.3 A better solution",
    "text": "4.3 A better solution\nHere is a better solution that generates multiple random numbers at once.\n\nN_total=1_000_000\nx=rnd.uniform(low=-1, high=1, size=N_total)\ny=rnd.uniform(low=-1, high=1, size=N_total)\nN_green= np.sum((x**2+y**2) &lt;= 1)                # Oh! the ease of NumPy!\n\n4 * (N_green / N_total)\n\n3.145332"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#a-smarter-solution",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#a-smarter-solution",
    "title": "Random Numbers (Good)",
    "section": "4.4 A smarter solution",
    "text": "4.4 A smarter solution\nThere is room to improve our algorithm. Notice that if we limit our experiment to only the first quadrant of the circle and the related square, our equation remains the same!\n\\[\\begin{align*}\n\\frac{\\text{Area of green region}}{\\text{Area of square}}&= \\frac{\\pi (1)^2\\color{darkorange}{/4}}{2\\times 2\\color{darkorange}{/4}}=\\frac{1}{4}\\pi \\quad\\Rightarrow \\quad\\pi  = 4\\left(\\frac{\\text{Area of green region}}{\\text{Area of square}}\\right)\n\\end{align*}\\]\nHowever, the range for \\(x\\) and \\(y\\) becomes \\([0,1)\\). So, our statistics have improved drastically! We can now use the faster, simpler rand().\n\nN_total=1_000_000\nx=rnd.rand(N_total)\ny=rnd.rand(N_total)\nN_green=np.sum((x**2+y**2) &lt;= 1)\n\n4 * (N_green / N_total)\n\n3.140268"
  },
  {
    "objectID": "docs/knowledge-lake/random_numbers/good/2_random_good.html#footnotes",
    "href": "docs/knowledge-lake/random_numbers/good/2_random_good.html#footnotes",
    "title": "Random Numbers (Good)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRandom walks are important in many branches of science. For example, see here.↩︎"
  },
  {
    "objectID": "docs/about/overview.html",
    "href": "docs/about/overview.html",
    "title": "Overview",
    "section": "",
    "text": "Python is a popular and versatile programming language that is easy to learn and read. It enables quick and efficient work in tasks like plotting, data analysis, and simulations. Although not the fastest or most efficient (like, for instance, C++), it is versatile and fun to use, particularly for science applications.\nIn this seminar, we will explore how Python can implement various techniques for solving physics problems. This seminar is not exhaustive but aims to cover a few concepts so you can be exposed to different methods (such as Monte Carlo) and understand different programming approaches (such as object-oriented programming). This experience will complement and supplement what you will learn in your other courses.\n\n\n\nThe material is designed to accommodate varying levels of knowledge, from beginners to advanced users.\nThe goal is to progress from your starting point, regardless of where that may be. “…what ultimately matters in this [seminar] is not so much where you end up relative to your classmates but where you will end up relative to yourself when you began” (Quote from Harvard University’s CS50 course (“CS50” 2024))\nThe best way to learn programming is by doing, so expect to spend plenty of time experimenting and practicing.\nYou are not expected to work on the seminar content outside the seminar hours. The material introduced in the seminar has been intentionally reduced over time to accommodate carryover work from the previous day.\nYou also do not have to complete every topic and problem! Often, you will learn more by focusing on doing a few things well(the cliché less is more).\nYou can work on the material independently. The facilitator’s role will be to:\n\nExplain and clarify topics beyond the provided material.\nPersonalise the learning experience by spending time with each participant.\n\n\n\n\n\n\nDay 1: This is the most demanding day, covering various topics. If you are new to Python, focus on the basics by practicing examples and exercises. If you are more experienced, briefly review the basics before diving into the more advanced topics. Work through the exercises and try your best to complete as many as possible.\nDay 2: We’ll explore using random numbers to solve simple problems, including electron and Brownian motion.\nDay 3: Focus on interacting systems such as the Boltzmann distribution and the Ising model.\nDay 4: Work with differential equations.Start working on your group project.\nDay 5: Complete the group project and present.",
    "crumbs": [
      "Overview",
      "Introduction",
      "Overview"
    ]
  },
  {
    "objectID": "docs/about/overview.html#things-to-note",
    "href": "docs/about/overview.html#things-to-note",
    "title": "Overview",
    "section": "",
    "text": "The material is designed to accommodate varying levels of knowledge, from beginners to advanced users.\nThe goal is to progress from your starting point, regardless of where that may be. “…what ultimately matters in this [seminar] is not so much where you end up relative to your classmates but where you will end up relative to yourself when you began” (Quote from Harvard University’s CS50 course (“CS50” 2024))\nThe best way to learn programming is by doing, so expect to spend plenty of time experimenting and practicing.\nYou are not expected to work on the seminar content outside the seminar hours. The material introduced in the seminar has been intentionally reduced over time to accommodate carryover work from the previous day.\nYou also do not have to complete every topic and problem! Often, you will learn more by focusing on doing a few things well(the cliché less is more).\nYou can work on the material independently. The facilitator’s role will be to:\n\nExplain and clarify topics beyond the provided material.\nPersonalise the learning experience by spending time with each participant.",
    "crumbs": [
      "Overview",
      "Introduction",
      "Overview"
    ]
  },
  {
    "objectID": "docs/about/overview.html#tentative-schedule",
    "href": "docs/about/overview.html#tentative-schedule",
    "title": "Overview",
    "section": "",
    "text": "Day 1: This is the most demanding day, covering various topics. If you are new to Python, focus on the basics by practicing examples and exercises. If you are more experienced, briefly review the basics before diving into the more advanced topics. Work through the exercises and try your best to complete as many as possible.\nDay 2: We’ll explore using random numbers to solve simple problems, including electron and Brownian motion.\nDay 3: Focus on interacting systems such as the Boltzmann distribution and the Ising model.\nDay 4: Work with differential equations.Start working on your group project.\nDay 5: Complete the group project and present.",
    "crumbs": [
      "Overview",
      "Introduction",
      "Overview"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_3_jupyter.html#download-install-miniconda",
    "href": "docs/setting-up/setup_3_jupyter.html#download-install-miniconda",
    "title": "Hello, Jupyter! (Need)",
    "section": "2.1 Download & install Miniconda",
    "text": "2.1 Download & install Miniconda\nFirst, we need to download the installer. Please follow the instructions below that are relevant to your operating system.\n\nWindows macOS \n\n\n\nDownload installer here\nInstall Miniconda.\n\nDouble-clicking the .exe file.\nFollow the instructions on the screen:\n\nWhen not sure, just use the installer’s default setting.\nYou must decide ‘Just Me’ or ‘All Users’. If you are installing for ‘All Users’, you must have Administrator privileges on your machine.\n\n\n\n\n\n\nDownload the installer\n\nVisit this page.\nChoose the bash package corresponding to your computer’s chip (i.e., M1, Intel)\nDownload to your Downloads folder (this is the default).\n\nInstall Miniconda.\n\nStart up the Terminal app either from the Applications folder or using the Launchpad.\n\nType the following and press ENTER\n\n\ncd ~/Downloads\nThis changes directory (folder) to ‘Downloads’.\n\n\nType the following, adjusting the file name according to step 1, and press ENTER\n\n\nbash Miniconda3-latest-MacOSX-x86_64.sh\nThis starts the installer.\n\n\nFollow the instructions on the screen:\n\nWhen not sure, just use the installer’s default setting.\nYou must decide ‘Just Me’ or ‘All Users’. If you are installing for ‘All Users’, you must have Administrator privileges on your machine.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(A) Setting up",
      "Hello, Jupyter! (Need)"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_3_jupyter.html#what-is-the-command-prompt",
    "href": "docs/setting-up/setup_3_jupyter.html#what-is-the-command-prompt",
    "title": "Hello, Jupyter! (Need)",
    "section": "3.1 What is the command prompt",
    "text": "3.1 What is the command prompt\nBefore proceeding further, allow me to introduce you to the command prompt. The command prompt is one of the most powerful features of your operating system. However, because it is not as friendly as the windows based graphical user interface (GUI), people shy away from using it. Unfortunately, we do not have a choice; we have to use the prompt to maintain (i. e., install, uninstall, upgrade) components and to start Jupyter Notebooks. So, let’s bite the bullet and learn how to use it.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(A) Setting up",
      "Hello, Jupyter! (Need)"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_3_jupyter.html#opening-the-prompt",
    "href": "docs/setting-up/setup_3_jupyter.html#opening-the-prompt",
    "title": "Hello, Jupyter! (Need)",
    "section": "3.2 Opening the prompt",
    "text": "3.2 Opening the prompt\n\nWindows macOS \n\n\nWindows users should use the Anaconda Prompt.You can open this from the Start menu.\n\n\nmacOS has a native prompt called the Terminal, which you can open from the Applications folder or the Launchpad.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(A) Setting up",
      "Hello, Jupyter! (Need)"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_3_jupyter.html#navigate-using-the-prompt",
    "href": "docs/setting-up/setup_3_jupyter.html#navigate-using-the-prompt",
    "title": "Hello, Jupyter! (Need)",
    "section": "3.3 Navigate using the prompt",
    "text": "3.3 Navigate using the prompt\nWe will often need to navigate to different folders using the prompt. The command to change the directory (or folder) is issued as follows.\ncd path-to-folder\nLet’s navigate into the folder you created previously. For this, we need the full path (e.g. C:\\\\Documents...) of that folder. Using the GUI (Windows File Explorer or Finder) is the easiest way to extract the path to the folder you want.\n\n\n\n\n\nGo to the folder using the file explore GUI,\nRight-click on the top address bar as shown below.\n\nPick Copy address as text\nNow just paste the result in the command line and press Enter:\n\ncd path-to-folder\n\n\n\nLocate the folder using the Finder,\nRight-click on the folder icon and choose Get Info.\nNow hold the Option button and pick Copy filename as Pathname.\nNow just paste the result in the command line and press Enter:\n\ncd path-to-folder",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(A) Setting up",
      "Hello, Jupyter! (Need)"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_3_jupyter.html#using-the-prompt-with-conda",
    "href": "docs/setting-up/setup_3_jupyter.html#using-the-prompt-with-conda",
    "title": "Hello, Jupyter! (Need)",
    "section": "3.4 Using the prompt with conda",
    "text": "3.4 Using the prompt with conda\nconda is the name of the main programme from Anaconda that controls everything in the installation. It is called the package manager. You will typically have to use conda to install, upgrade or remove packages. Here are two examples of how to use the prompt. Please try them both.\n\nTesting our installation.Updating Miniconda\n\n\nLet’s use the prompt to check if our previous installation of Miniconda went okay. For this, run (i.e., type and press ENTER) the following:\nconda list\nThis will give you a list of all the things that are installed under Miniconda.\n\n\nThe installer does not always install the most recent versions. So, let’s first update Miniconda itself. Here is the command to do this.\nconda update conda",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(A) Setting up",
      "Hello, Jupyter! (Need)"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_3_jupyter.html#jupyter-the-first-run",
    "href": "docs/setting-up/setup_3_jupyter.html#jupyter-the-first-run",
    "title": "Hello, Jupyter! (Need)",
    "section": "4.1 Jupyter… the first run",
    "text": "4.1 Jupyter… the first run\nFinally, it is time to run Jupyter for the first time. We need to start Jupyter using the prompt by invoking:\njupyter notebook\nIf you are on Windows, you can also type “Jupyter notebook” in the search bar and click on the Jupyter Notebook icon.\nWhen you do this, a webpage will open up and display the content of the folder you started Jupyter in. Since we are in the Learning Portfolio, you should see that content.\nWe are done with this chapter. I will show you how to use Jupyter in the next part. But, for now, press the button Logout.",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(A) Setting up",
      "Hello, Jupyter! (Need)"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_3_jupyter.html#footnotes",
    "href": "docs/setting-up/setup_3_jupyter.html#footnotes",
    "title": "Hello, Jupyter! (Need)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nFor instance: PyCharm, Spyder, Visual Studio, Colab, Kaggle↩︎\nwe will learn what a package does a bit later. For the moment, think of it as an essential ‘item’.↩︎\ni. e. only installs essential features↩︎",
    "crumbs": [
      "Overview",
      "<strong>Day 1</strong>",
      "(A) Setting up",
      "Hello, Jupyter! (Need)"
    ]
  },
  {
    "objectID": "docs/setting-up/setup_1_hypothesis.html",
    "href": "docs/setting-up/setup_1_hypothesis.html",
    "title": "Hello, Hypothesis! (Good)",
    "section": "",
    "text": "Hypothesis is a free web tool that allows you to “annotate the web”. Specifically, it will enable you to highlight and make notes on web pages. It also has a chat feature that allows you to develop a discussion (with your instructors and peers) around the web page’s content. For 73, we will use Hypothesis to share comments and questions about the notes and inform me of any typos or mistakes."
  },
  {
    "objectID": "docs/setting-up/setup_1_hypothesis.html#footnotes",
    "href": "docs/setting-up/setup_1_hypothesis.html#footnotes",
    "title": "Hello, Hypothesis! (Good)",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nHowever, by installing the Chrome extension, you can use Hypothesis with almost all other web pages. Please refer to this page if you want to do this.↩︎"
  }
]